<?php
/**
 * @file
 * Code for the DGU Data set request feature.
 */


define('DATA_REQUEST_MODERATION_PERMISSION', 'edit any dataset_request content');
define('PUBLIC_DATA_REQUEST_GRANT', 2147483647);    // maximum possible value (avialable in Solr) to avoid conflict with $node->uid
define('DATA_REQUEST_MODERATOR_GRANT', 2147483646); // maximum possible value (avialable in Solr) -1 to avoid conflict with $node->uid
define('DATA_REQUEST_CKAN_ADMIN_GRANT', 2147483645); // maximum possible value (avialable in Solr) -2 to avoid conflict with $node->uid

include_once 'dgu_data_set_request.features.inc';

/*
 * Implements hook_ctools_plugin_directory().
 */
function dgu_data_set_request_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_libraries_info_file_paths().
 */
function dgu_data_set_request_libraries_info_file_paths() {
  $d3_libraries = drupal_get_path('module', 'dgu_data_set_request') . '/libraries/';
  foreach (dgu_data_set_request_d3_libraries() as $library) {
    $paths[] = $d3_libraries . $library;
  }
  return $paths;
}

/**
 * Implements hook_libraries_info_alter().
 */
function dgu_data_set_request_libraries_info_alter(&$libraries) {
  $path = drupal_get_path('module', 'dgu_data_set_request') . '/libraries/';
  foreach (dgu_data_set_request_d3_libraries() as $library) {
    // Change library path to path/to/module/d3/libraries
    $libraries[$library]['library path'] = $path . $library;
  }
}

/**
 * Helper callback to return all d3 libraries located inside this module.
 */
function dgu_data_set_request_d3_libraries() {
  $module_path = drupal_get_path('module', 'dgu_data_set_request');
  $d3_libraries = str_replace($module_path . '/libraries/', '', glob($module_path . '/libraries/*' , GLOB_ONLYDIR));
  return $d3_libraries;
}

/**
 * Implements hook_dgu_moderation_moderator_permission().
 */
function dgu_data_set_request_dgu_moderation_moderator_permission(&$node) {
  if ($node->type == 'dataset_request') {
    if (user_access(DATA_REQUEST_MODERATION_PERMISSION) || is_or_was_assignee($node->nid)) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function dgu_data_set_request_menu_breadcrumb_alter(&$active_trail, $item) {
  switch ($item['path']) {
    case 'data-request':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('Latest data requests');
      break;
    case 'data-request/blogs':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('ODUG Blogs');
      break;
    case 'data-request/minutes':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('ODUG Minutes');
      break;
  }
  if (isset($item['map'][1]->type) && $item['map'][1]->type == 'dataset_request') {
    $active_trail[2] = $active_trail[1];
    $active_trail[1] = array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array());

    if (isset($item['map'][2]) && $item['map'][2] == 'edit') {
      unset($active_trail[2]);
    }

  }
}


/**
 * Implements Hook hook_form_FORM_ID_alter which:
 */
function dgu_data_set_request_form_dataset_request_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  drupal_set_title('Create a dataset request');
  unset($form['actions']['preview']);
  $form['#attributes']['class'][] = "boxed";

  if (user_access(DATA_REQUEST_MODERATION_PERMISSION) || (isset($node->nid) && is_or_was_assignee($node->nid))) {
    $form['#after_build'][] = 'dgu_moderation_node_forms_after_build';

    $form['submit_top'] = $form['actions']['submit'];
    $form['submit_top']['#weight'] = -100;
    $form['#attached']['css'][] = array(
      'data' => '#edit-submit-top {float: right;}',
      'type' => 'inline',
    );
    $assignee_uids = dgu_data_set_request_get_assignees($node->nid);
    $assignees = array();
    foreach($assignee_uids as $uid) {
      $user = user_load($uid);
      if (empty($form['field_assignee'][LANGUAGE_NONE]['#default_value'][0]) || isset($form['field_assignee'][LANGUAGE_NONE]['#default_value'][0]) && $form['field_assignee'][LANGUAGE_NONE]['#default_value'][0] != $user->uid) {
        $assignees[] = $user->name;
      }
    }
    if(!empty($assignees)) {
      $assignees = '<div class="help-block">Previous RM\'s: ' . implode(', ', $assignees) . '</div>';
      $form['field_assignee']['#suffix'] = $assignees;
    }
  }

  else {
    dgu_moderation_node_forms_alter($form);
  }

  $form['#validate'][] = 'dgu_data_set_request_form_validate';
  $form['#submit'][] = 'dgu_data_set_request_form_submit';
}

function dgu_data_set_request_form_validate($form, &$form_state) {
  if (isset($form_state['values']['field_review_outcome'][LANGUAGE_NONE][0]['value']) && ($form_state['values']['field_review_outcome'][LANGUAGE_NONE][0]['value'] == '0' || $form_state['values']['field_review_outcome'][LANGUAGE_NONE][0]['value'] == 2)) {
    if(empty($form_state['values']['field_data_set_link'][LANGUAGE_NONE][0]['url'])) {
      form_set_error('field_organisation_type', 'Dataset link field is required.');
    }
  }
}

function dgu_data_set_request_form_submit($form, &$form_state) {
  if (isset($form_state['values']['field_review_status'][LANGUAGE_NONE][0]['value']) && ($form_state['values']['field_review_status'][LANGUAGE_NONE][0]['value'] != '6')) {
    // Empty outcome field if a request is re-opened.
    $form_state['node']->field_review_outcome = array();
  }
}

function dgu_data_set_request_get_assignees($nid) {
  // TODO add static cache
  $query = db_select('field_revision_field_assignee', 'fpa')
    ->distinct()
    ->fields('fpa', array('field_assignee_uid'))
    ->condition('entity_type', 'node')
    ->condition('entity_id', $nid);
  return $query->execute()->fetchCol();
}

function dgu_data_set_request_node_access($node, $op, $account) {
  if ($op != 'create' && $node->type == 'dataset_request') {
    if(!($node->uid == $account->uid || user_access(DATA_REQUEST_MODERATION_PERMISSION))) {
      if(isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
        if(isset($node->field_publisher_ref[LANGUAGE_NONE][0]['id']) && isset($account->data['ckan_publishers'][$node->field_publisher_ref[LANGUAGE_NONE][0]['id']]) && $account->data['ckan_publishers'][$node->field_publisher_ref[LANGUAGE_NONE][0]['id']] == 'admin') {
          return NODE_ACCESS_ALLOW;
        }
        $assignees = dgu_data_set_request_publisher_assignee_get_assignees($node->nid);
        if(!in_array($account->uid, $assignees)) {
          return NODE_ACCESS_DENY;
        }

      }
    }
  }
}

function dgu_data_set_request_node_access_records($node) {
  if ($node->type == 'dataset_request') {

    $assignees = dgu_data_set_request_publisher_assignee_get_assignees($node->nid);

    $grants = array();
    if (isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
      // Private request
      $grants[] = array(
        'realm' => 'private_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 1,
      );
      $grants[] = array(
        'realm' => 'private_data_request',
        'gid' => DATA_REQUEST_CKAN_ADMIN_GRANT,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1,
      );
      if ($node->uid) {
        // Grant author permission only if author is not anonymous.
        $grants[] = array(
          'realm' => 'private_data_request',
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 1,
        );
      }
      if (!empty($assignees)) {
        // Grant permission to all users which are or were assignees in this request.
        foreach($assignees as $assignee_uid) {
          $grants[] = array(
            'realm' => 'private_data_request',
            'gid' => $assignee_uid,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 1,
          );
        }
      }
    }
    else {
      // Public request
      $grants[] = array(
        'realm' => 'public_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 1,
      );
      if ($node->uid) {
        // Grant author permission only if author is not anonymous.
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 1,
        );
      }
      if (!empty($assignees)) {
        // Grant permission to all users which are or were assignees in this request.
        foreach($assignees as $assignee_uid) {
          $grants[] = array(
            'realm' => 'public_data_request',
            'gid' => $assignee_uid,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 1,
          );
        }
      }
      if ($node->status == 1) {
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => PUBLIC_DATA_REQUEST_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 1,
        );
      }
    }
    return $grants;
  }
}

function dgu_data_set_request_node_grants($account, $op) {
  $grants = array();
  $grants['private_data_request'] = array($account->uid);
  $grants['public_data_request'] = array($account->uid, PUBLIC_DATA_REQUEST_GRANT);
  if (user_access(DATA_REQUEST_MODERATION_PERMISSION, $account)) {
    $grants['private_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
    $grants['public_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
  }
  if (!empty($account->data['ckan_publishers']) && in_array('admin', $account->data['ckan_publishers'])) {
    $grants['private_data_request'][] = DATA_REQUEST_CKAN_ADMIN_GRANT;
  }
  return $grants;
}


/**
 * Implements hook_assignee_get_users().
 */
function dgu_data_set_request_assignee_get_users($field = NULL, $instance = NULL, $entity_type = NULL, $entity) {

  $query = db_select('role', 'r');
  $query->join('users_roles', 'ur', 'r.rid = ur.rid');
  $query->join('users', 'u', 'u.uid = ur.uid');
  $query->fields('ur', array('uid'))
        ->fields('u', array('name'))
        ->condition('r.name', 'data request administrator');
  $users = $query->execute()->fetchAll();

  $options = array();
  foreach ($users as $user) {
    $options[$user->uid] = $user->name;
  }

  return $options;
}

/**
 * Implements hook_node_presave().
 */
function dgu_data_set_request_node_presave($node) {
  if ($node->type == 'dataset_request') {
    $previous_data_request_revision = &drupal_static('previous_data_request_revision');

    // Workbench moderation uses shutdown function to update the node for the second time in the same request.
    // To avoid messages being created twice we ignore second node update in single request.
    if (isset($previous_data_request_revision)) {
      $updates_to_ignore = &drupal_static('node_updates_to_ignore');
      $updates_to_ignore = isset($updates_to_ignore) ? $updates_to_ignore : array();
      $updates_to_ignore[] = $node->nid;
    }

    // Store previous revision of the node in static cache to be available for comparison in hook_node_update().
    $previous_data_request_revision = node_load($node->nid);
  }
}

/**
 * Implements hook_entity_insert().
 */
function dgu_data_set_request_entity_insert($entity, $type) {
  if($type == 'reply' && $entity->bundle == 'review_comment' && module_exists('message_subscribe')) {
    // This is taken from message stack examples.
    // It's related to message_notify how it stores rendered subject and body via view modes.
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );
    $data_request_admin_roles = variable_get('dgu_data_set_request_data_request_admin_roles',array(3, 6, 10)); // 3 = administrator, 6 = data publisher, 10 = data request administrator

    // Get data_request_update message bundle and set required fields.
    $message = message_create('data_request_review_comment_new');
    $wrapper = entity_metadata_wrapper('message', $message);
    $data_request_node = new stdClass();
    $data_request_node->nid = $entity->entity_id;
    $wrapper->field_data_request_reference->set($data_request_node);
    $wrapper->field_reply_reference->set($entity);

    $uids = _dgu_data_set_request_get_subscribers($data_request_node->nid, $data_request_admin_roles, FALSE);
    message_subscribe_send_message('node', $data_request_node, $message, $options, array('uids' => $uids));

  }
}

/**
 * Implements hook_node_update().
 */
function dgu_data_set_request_node_update($node) {
  if ($node->type == 'dataset_request' && module_exists('message_subscribe')) {

    // Ignore second node update in single request.
    // See dgu_data_set_request_node_presave();
    $updates_to_ignore = &drupal_static('node_updates_to_ignore');
    if (is_array($updates_to_ignore) && in_array($node->nid, $updates_to_ignore)) {
      return;
    }

    // Don't create a message about moderation here, there should be
    // an universal message about moderation state change for all content types.
    if (empty($node->workbench_moderation_state_current) && $node->workbench_moderation['current']->from_state == 'needs_review' && $node->workbench_moderation['current']->state == 'published'
      || $node->workbench_moderation['current']->from_state == 'needs_review' && $node->workbench_moderation['current']->state == 'draft') {
      return;
    }

    $previous_data_request_revision = &drupal_static('previous_data_request_revision');
    $previous_rm = isset($previous_data_request_revision->field_assignee[LANGUAGE_NONE][0]['uid']) ? $previous_data_request_revision->field_assignee[LANGUAGE_NONE][0]['uid'] : NULL;
    $previous_publisher_assignee = isset($previous_data_request_revision->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) ? $previous_data_request_revision->field_publisher_assignee[LANGUAGE_NONE][0]['uid'] : NULL;

    $fields_for_short_summary = array('field_review_status' => 'value', 'field_review_outcome' =>'value', 'field_review_notes' => 'value');
    $data_request_admin_roles = variable_get('dgu_data_set_request_data_request_admin_roles',array(3, 6, 10, 12)); // 3 = administrator, 6 = data publisher, 10 = data request administrator, 12 = editor

    // This is taken from message stack examples.
    // It's related to message_notify how it stores rendered subject and body via view modes.
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );

    // Use static cache to get this summary available in hook_tokens().
    $summary_of_changes = &drupal_static('data_request_summary_of_changes');

    if (isset($node->field_assignee[LANGUAGE_NONE][0]['uid']) && $previous_rm != $node->field_assignee[LANGUAGE_NONE][0]['uid']
     || isset($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) && $previous_publisher_assignee != $node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) {

      // There is a new publisher assignee or new RM, this is special case where an assignee
      // must receive different message than all other subscribers.
      if (isset($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) && $previous_publisher_assignee != $node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) {
        $assignee = user_load($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']);
      }
      else {
        $assignee = user_load($node->field_assignee[LANGUAGE_NONE][0]['uid']);
      }

      // Get data_request_assignee message bundle and set required fields.
      $message_assignee = message_create('data_request_assignee');
      $wrapper = entity_metadata_wrapper('message', $message_assignee);
      $wrapper->field_data_request_reference->set($node);
      $wrapper->field_data_request_assignee->set($assignee);

      $default_notifier = variable_get('message_subscribe_default_notifiers', array('email' => 'email'));
      $notifier = isset($assignee->field_digest_notifier[LANGUAGE_NONE][0]['value']) ? array($assignee->field_digest_notifier[LANGUAGE_NONE][0]['value'] => $assignee->field_digest_notifier[LANGUAGE_NONE][0]['value']) : $default_notifier;
      $subscribe_options = array(
        'uids' => array(
          $assignee->uid => array(
            'notifiers' => $notifier,
          ),
        ),
      );

      message_subscribe_send_message('node', $node, $message_assignee, $options, $subscribe_options);

      // Temporarily unsubscribe current assignee to avoid sending two messages
      // to this person (one about being current assignee, second about request update event)
      // if this person was subscribed before (e.g. was already an assignee before).
      flag('unflag', 'subscribe_node', $node->nid, $assignee);

      // Send data_request_update message to all subscribers.
      // First test if particular fields has changed and notify all non admin users.
      if(_dgu_data_set_request_fields_changed($fields_for_short_summary, $node, $previous_data_request_revision)) {

        // Get data_request_update message bundle and set required fields.
        $message_update = message_create('data_request_update');
        $wrapper = entity_metadata_wrapper('message', $message_update);
        $wrapper->field_data_request_reference->set($node);

        $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision, $fields_for_short_summary);
        $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles, FALSE);
        message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $uids));

      }
      // Then notify admin users with full summary of changes.
      // Get data_request_update message bundle and set required fields.
      $message_update = message_create('data_request_update');
      $wrapper = entity_metadata_wrapper('message', $message_update);
      $wrapper->field_data_request_reference->set($node);

      $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision);
      $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles);
      message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $uids));

      // Subscribe an assignee to following notifications about data request updates.
      flag('flag', 'subscribe_node', $node->nid, $assignee);
    }
    else {
      // Something else than assignee has been changed, simply notify all subscribers.

      // First notify admin users with full summary of changes.

      // Get data_request_update message bundle and set required fields.
      $message_update = message_create('data_request_update');
      $wrapper = entity_metadata_wrapper('message', $message_update);
      $wrapper->field_data_request_reference->set($node);

      $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision);
      $admin_uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles);
      message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $admin_uids));

      // Then test if public fields has changed and notify all non admin users.
      if(_dgu_data_set_request_fields_changed($fields_for_short_summary, $node, $previous_data_request_revision)) {
        // Get data_request_update message bundle and set required fields.
        $message_update = message_create('data_request_update');
        $wrapper = entity_metadata_wrapper('message', $message_update);
        $wrapper->field_data_request_reference->set($node);

        $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision, $fields_for_short_summary);
        $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles, FALSE);
        $non_admin_uids = array_diff($uids, $admin_uids);
        message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $non_admin_uids));
      }
    }
  }
}


/**
 * Helper function to test if particular fields has changed between revisions.
 */
function _dgu_data_set_request_get_subscribers($nid, $rids, $in_rids = TRUE) {
  // Get all flags on given entity type.
  $flags = message_subscribe_flag_get_flags('node');
  $default_notifier = variable_get('message_subscribe_default_notifiers', array('email' => 'email'));
  $fids = array();
  foreach ($flags as $flag) {
    $fids[$flag->fid] = $flag->name;
  }
  // Query all the entity IDs inside the given flags. We don't use
  // flag_get_content_flags() as we want to get all the flaggings of an
  // entity-type in a single query.
  $query = db_select('flagging', 'f');
  $query->join('users', 'u', 'u.uid = f.uid');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('field_data_field_digest_notifier', 'fdn', 'fdn.entity_id = u.uid');
  $query->fields('f', array('uid'));
  $query->fields('fdn', array('field_digest_notifier_value'))
    ->distinct()
    ->condition('f.entity_type', 'node')
    ->condition('f.entity_id', $nid)
    ->condition('fid', array_keys($fids), 'IN');
  if ($in_rids == TRUE) {
    $query->condition('ur.rid', $rids, 'IN');
  }
  else {
    $query->condition(db_or()->where('ur.rid NOT IN (' . implode (', ', $rids) . ')')->isNull('ur.rid'));
  }
  $result = $query->execute()->fetchAll();
  $uids = array();
  foreach ($result as $row) {
    $uids[$row->uid]['notifiers'] = isset($row->field_digest_notifier_value) ? array($row->field_digest_notifier_value => $row->field_digest_notifier_value) : $default_notifier;
  }
  return $uids;
}

/**
 * Helper function to test if particular fields has changed between revisions.
 */
function _dgu_data_set_request_fields_changed($fields_for_short_summary, $current_revision, $previous_revision) {
  foreach ($fields_for_short_summary as $field_name => $key) {
    $field_current_revision = isset($current_revision->{$field_name}[LANGUAGE_NONE][0][$key]) ? $current_revision->{$field_name}[LANGUAGE_NONE][0][$key] : NULL;
    $field_previous_revision = isset($previous_revision->{$field_name}[LANGUAGE_NONE][0][$key]) ? $previous_revision->{$field_name}[LANGUAGE_NONE][0][$key] : NULL;
    if ($field_current_revision !== $field_previous_revision) {
      return TRUE;
    }
  }
}

/**
 * Helper function to get summary of changes used in notification about data request update.
 */
function _dgu_data_request_get_summary_of_changes($current_revision, $previous_revision, $fields = array()) {

  //TODO use $fields to render particular summary

  $changes = array();
  $current_request = node_view($current_revision);
  $previous_request = node_view($previous_revision);

  foreach ((array)$current_request['#node'] as $key => $value) {
    // Iterate through all fields.
    if(strpos($key, 'field_') === 0) {
      if(!empty($fields)) {
        if(!in_array($key, array_keys($fields))) {
          continue;
        }
      }

      if ((isset($current_request[$key]['#items']) && !isset($previous_request[$key]['#items']))
       || (!isset($current_request[$key]['#items']) && isset($previous_request[$key]['#items']))
       || (isset($current_request[$key]['#items']) && isset($previous_request[$key]['#items']) && count($current_request[$key]['#items']) != count($previous_request[$key]['#items']))) {
        // If multi value field had different quantity of items it is modified.
        _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, $changes);
      }
      else {
        // Otherwise compare the values.
        $current_node = clone $current_request['#node'];
        $previous_node = clone $previous_request['#node'];

        if (isset($current_node->{$key}[LANGUAGE_NONE])) {
          foreach ($current_node->{$key}[LANGUAGE_NONE] as $index => &$item) {

            // Fix weird discrepancy on text_log fields, for some reason current revision has
            // only 'value' element, previous revision has also 'safe_value' and 'format'.
            $item['format'] = FALSE;
            $item['safe_value'] = FALSE;
            $previous_node->{$key}[LANGUAGE_NONE][$index]['format'] = FALSE;
            $previous_node->{$key}[LANGUAGE_NONE][$index]['safe_value'] = FALSE;

            if ($item != $previous_node->{$key}[LANGUAGE_NONE][$index]) {
              _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, $changes);
            }
          }
        }
      }
    }

  }

  if (!empty($changes)) {
    // Render summary.
    $output = "Summary of changes:\n";
    foreach ($changes as $field_name => $diff) {
      $output .= 'Field "' . $field_name . '" changed' . "\n";
      $output .= 'from: ' . $diff['previous'] . "\n";
      $output .= 'to:   ' . $diff['current'] . "\n";
      $output .= "\n";
    }
    return $output;
  }
}

/**
 * Helper function to render changes in a single field.
 */
function _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, &$changes) {
  $new_value = field_view_field('node', $current_revision, $key);
  $old_value = field_view_field('node', $previous_revision, $key);

  $new_value['#label_display'] = 'hidden';
  $old_value['#label_display'] = 'hidden';

  $title = $new_value['#title'] ? $new_value['#title'] : $old_value['#title'];

  $changes[$title] = array (
    'current' => substr(_dgu_data_set_request_remove_multiple_commas(strip_tags(str_replace('</', ', </', render($new_value)))), 0, -2),
    'previous' => substr(_dgu_data_set_request_remove_multiple_commas(strip_tags(str_replace('</', ', </', render($old_value)))), 0, -2),
  );
}

/**
 * Helper recursive function to get rid of multiple commas added before
 * each closing HTML tag in _dgu_data_set_request_render_changes() function.
 */
function _dgu_data_set_request_remove_multiple_commas($string) {
  $string = str_replace(', , ', ', ', $string);
  if (strpos($string, ', , ') !== FALSE) {
    $string = _dgu_data_set_request_remove_multiple_commas($string);
  }
  return $string;
}


/**
* Implements hook_token_info().
*/
function dgu_data_set_request_token_info() {
  $info['tokens']['message']['data_request-summary_of_changes'] = array(
    'name' => t('Data request - summary of changes'),
    'description' => t('Returns summary of changes in modified data request'),
  );
  return $info;
}
/**
* Implements hook_tokens().
*/
function dgu_data_set_request_tokens($type, $tokens, array $data = array(), array $options = array()) {
 $replacements = array();
   if ($type == 'message') {
     foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'data_request-summary_of_changes':
          $replacements[$original] = drupal_static('data_request_summary_of_changes');
          break;
      }
     }
  }
  return $replacements;
}

/**
 * Implements hook_preprocess_replies().
 */
function  dgu_data_set_request_preprocess_replies(&$variables) {
  if ($variables['bundle'] == 'review_comment' && $variables['entity_type'] == 'node') {
    if(!node_access('update', $variables['entity'])) {
      global $user;
      $assignees = dgu_data_set_request_publisher_assignee_get_assignees($variables['entity_id']);
      // Check if current user is or wes publisher assignee or if is an admin for referenced publisher or parent publisher.
      if(!in_array($user->uid, $assignees) && !(isset($variables['entity']->field_publisher_ref[LANGUAGE_NONE][0]['id']) && in_array($variables['entity']->field_publisher_ref[LANGUAGE_NONE][0]['id'], dgu_user_get_admin_publishers()))) {
        // Hide reply forms for users which haven't got access to edit entity.
        // We need to give them full access to create/update review_comment replies
        // but only on nodes they have permissions to edit, e.g data request assignee grant.
        unset($variables['replies']);
        unset($variables['reply_form']);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function dgu_data_set_request_form_reply_add_form_alter(&$form, &$form_state, $form_id) {
  if($form['#bundle'] == 'review_comment') {
    $form['field_review_comment'][LANGUAGE_NONE][0]['#title'] = 'Add review note <span class="submitted">(for non-public view)</span>';
    $form['submit']['#value'] = 'Submit review note';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function dgu_data_set_request_preprocess_page(&$variables) {
  if (arg(0) == 'user' || arg(0) == 'admin') {
    if($count = _dgu_data_set_request_active_requests_publisher_admin_count()) {
      $link_title = 'view ' . format_plural($count, 'it', 'these') . ' now';
      drupal_set_message(
        'There ' . format_plural($count, 'is ', 'are ') . $count . ' active data ' . format_plural($count, 'request', 'requests')
        . ' for publishers that you administer, <a class="publishers-active-requests-link" href="/admin/workbench/content/data-requests?field_review_status_value%5B%5D=1&field_review_status_value%5B%5D=2&field_review_status_value%5B%5D=3&field_review_status_value%5B%5D=4&field_review_status_value%5B%5D=5&title=&field_publication_preference_value=All&field_barriers_reason_value=All&field_assignee_uid=All&field_publisher_ref_id=All&field_publisher_assignee_uid=All&items_per_page=25">'
        . $link_title . '</a>.<br />See <a href="/help?tour=data_requests_practitioners_guide">Data requests practitioners guide</a>.'
      );
    }
    if($count = _dgu_data_set_request_active_requests_publisher_assignee_count()) {
      $link_title = 'view ' . format_plural($count, 'it', 'these') . ' now';
      drupal_set_message(
        'You have ' . $count . ' active data ' . format_plural($count, 'request', 'requests')
        . ' that need' . format_plural($count, 's', '')
        . ' review, <a class="active-requests-link" href="/admin/workbench/content/active">'
        . $link_title . '</a>.<br />See <a href="/help?tour=data_requests_user_guide">Data requests user guide</a>.'
      );
    }
  }
}

function _dgu_data_set_request_active_requests_publisher_assignee_count() {
  global $user;
  if (in_array('data publisher', $user->roles)) {
    $query = db_select('field_data_field_publisher_assignee', 'a');
    $query->fields('a');
    $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
    $query->condition('a.field_publisher_assignee_uid', $user->uid)
      ->condition('s.field_review_status_value', 0, '<>')
      ->condition('s.field_review_status_value', 6, '<>');
    $result = $query->execute();
    return $result->rowCount();
  }
}

function _dgu_data_set_request_active_requests_publisher_admin_count() {
  global $user;
  if (in_array('data publisher', $user->roles) && !empty($user->data['ckan_publishers']) && in_array('admin', $user->data['ckan_publishers'])) {

    $publishers = array();
    foreach ($user->data['ckan_publishers'] as $publisher_id => $capacity) {

      if($capacity == 'admin' && !in_array($publisher_id, $publishers)) {
        $publishers = array_merge($publishers, dgu_user_get_publisher_with_children($publisher_id));
      }
    }

    $query = db_select('field_data_field_publisher_ref', 'p');
    $query->join('node', 'n', 'n.nid = p.entity_id');
    $query->fields('p');
    $query->join('field_data_field_review_status', 's','p.entity_id = s.entity_id');
    $query->condition('s.field_review_status_value', 0, '<>')
      ->condition('s.field_review_status_value', 6, '<>')
      ->condition('p.field_publisher_ref_id', $publishers, 'IN');
    $query->addTag('node_access');
    $result = $query->execute();
    return $result->rowCount();
  }
}


/**
 * Implements hook_bootstrap_tour_alter().
 */
function dgu_data_set_request_bootstrap_tour_alter($tour) {
  global $user;
  foreach($tour->steps as &$step) {
    if (substr($step['path'], 0, 13) == 'tour-redirect') {
      $redirect = substr($step['path'], 14);
      switch ($redirect) {
        case 'active-data-request':
          $query = db_select('field_data_field_publisher_assignee', 'a');
          $query->fields('a', array('entity_id'));
          $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
          $query->join('node', 'n','a.entity_id = n.nid');
          $query->condition('a.field_publisher_assignee_uid', $user->uid)
            ->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->orderBy('n.nid', 'DESC');
          $active_request_nid = $query->execute()->fetchField();
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = drupal_get_path_alias('node/' . $active_request_nid) . '?' . $query;
          break;
        case 'publisher-active-data-request-url':
          $query_parameters = drupal_get_query_parameters();
          $query_parameters['field_review_status_value'] = array('1','2','3','4','5');
          $query_parameters['field_publication_preference_value'] = 'All';
          $query_parameters['field_barriers_reason_value'] = 'All';
          $query_parameters['field_assignee_uid'] = 'All';
          $query_parameters['field_publisher_ref_id'] = 'All';
          $query_parameters['field_publisher_assignee_uid'] = 'All';
          $query_parameters['items_per_page'] = '25';
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = 'admin/workbench/content/data-requests' . '?' . $query;
          break;
        case 'publisher-active-data-request':
          $publishers = array();
          foreach ($user->data['ckan_publishers'] as $publisher_id => $capacity) {
            if($capacity == 'admin' && !in_array($publisher_id, $publishers)) {
              $publishers = array_merge($publishers, dgu_user_get_publisher_with_children($publisher_id));
            }
          }
          $query = db_select('field_data_field_publisher_ref', 'p');
          $query->join('node', 'n', 'n.nid = p.entity_id');
          $query->fields('p', array('entity_id'));
          $query->join('field_data_field_review_status', 's','p.entity_id = s.entity_id');
          $query->join('node', 'n','p.entity_id = n.nid');
          $query->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->condition('p.field_publisher_ref_id', $publishers, 'IN')
            ->orderBy('n.nid', 'DESC');
          $query->addTag('node_access');
          $active_request_nid = $query->execute()->fetchField();
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = drupal_get_path_alias('node/' . $active_request_nid) . '?' . $query;
          break;
        case 'active-data-request-author':
          $query = db_select('field_data_field_publisher_assignee', 'a');
          $query->fields('a', array('entity_id'));
          $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
          $query->condition('a.field_publisher_assignee_uid', $user->uid)
            ->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->orderBy('entity_id', 'DESC');
          $active_request_nid = $query->execute()->fetchField();
          $active_request = node_load($active_request_nid);
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = drupal_get_path_alias('user/' . $active_request->uid) . '?' . $query;
          break;

        case 'active-data-request-author-contact':
          $query = db_select('field_data_field_publisher_assignee', 'a');
          $query->fields('a', array('entity_id'));
          $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
          $query->condition('a.field_publisher_assignee_uid', $user->uid)
            ->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->orderBy('entity_id', 'DESC');
          $active_request_nid = $query->execute()->fetchField();
          $active_request = node_load($active_request_nid);
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = 'user/' . $active_request->uid . '/contact?' . $query;
          break;
      }
    }
  }
}


/**
 * Implements hook_views_pre_view().
 */
function dgu_data_set_request_views_pre_view(&$view, &$display_id, &$args) {
  global $user;
  // If not moderator or editor then unset 'Data request' view header which tells about 'Needs review' page.
  if ($view->name == 'data_requests_administration' && $display_id == 'page_1') {
    if (!in_array('moderator', $user->roles) && !in_array('editor', $user->roles)) {
      $view->set_item_option($display_id, 'header', 'area', 'content', '');
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function dgu_data_set_request_views_query_alter(&$view, &$query) {
  global $user;
  if ($view->name == 'data_requests_administration' && $view->current_display == 'page_1' && !in_array('data request administrator', $user->roles) && !in_array('editor', $user->roles)) {
    $publishers = array();
    if (!empty($user->data['ckan_publishers']) && in_array('admin', $user->data['ckan_publishers'])) {
      // Limit requests only to publisher (with all sub publishers) in which current user has 'admin' capacity.
      $publishers = dgu_user_get_admin_publishers();
    }
    elseif (in_array('data publisher', $user->roles)) {
      // Limit requests only to publishers (without sub publishers) in which current user has 'editor' capacity.
      $full_account = user_load($user->uid);

      foreach ($full_account->field_publishers[LANGUAGE_NONE] as $publisher_ref) {
        $publishers[] = $publisher_ref['target_id'];
      }
    }
    else {
      return;
    }

    $query->where[1]['conditions'][] = array(
      'field' => 'field_data_field_publisher_ref.field_publisher_ref_id',
      'value' => array($publishers),
      'operator' => 'in'
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dgu_data_set_request_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['view']->name == 'data_requests_administration' && $form_state['view']->current_display == 'page_1') {

    if ($admin_publishers = dgu_user_get_admin_publishers()) {
      // Remove publishers which are filtered out in dgu_user_views_query_alter() from exposed filter.
      foreach ($form['field_publisher_ref_id']['#options'] as $key => $value) {
        if (!in_array($key, $admin_publishers) && $key != 'All') {
          unset($form['field_publisher_ref_id']['#options'][$key]);
        }
      }

      $query = db_select('field_data_field_publisher_assignee', 'pa');
      $query->join('field_data_field_publisher_ref', 'p', 'p.entity_id = pa.entity_id');
      $query->fields('pa', array('field_publisher_assignee_uid'))
        ->condition('p.field_publisher_ref_id', $admin_publishers, 'IN')
        ->distinct();
      $publisher_assignees = $query->execute()->fetchCol();

      // Also remove not relevant publisher assignees.
      foreach ($form['field_publisher_assignee_uid']['#options'] as $key => $value) {
        if (!in_array($key, $publisher_assignees) && $key != 'All') {
          unset($form['field_publisher_assignee_uid']['#options'][$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_process_views_data_export_csv_body().
 */
function dgu_data_set_request_process_views_data_export_csv_body(&$variables) {

  $map_string = <<<EOT
1,874
2,941
3,875
4,826
5,824
6,940
7,939
8,1431
9,831
10,1432
11,830
12,880
13,837
14,839
15,835
16,836
17,879
18,942
19,878
20,877
21,876
22,1430
23,891
24,1429
25,881
26,882
27,945
28,894
29,893
30,883
31,943
32,892
33,1182
34,944
35,1353
36,899
37,898
38,884
39,897
40,885
41,946
42,896
43,886
44,895
45,825
46,950
47,870
48,902
49,901
50,1428
51,887
52,823
53,900
54,817
55,949
56,948
57,947
58,1427
59,907
60,834
61,906
62,832
63,951
64,905
65,904
66,952
67,1424
68,953
69,833
70,903
71,1426
72,911
73,1425
74,829
75,828
76,910
77,827
78,1423
79,909
80,1422
81,957
82,818
83,954
84,908
85,915
86,1421
87,1183
88,1420
89,819
90,820
91,914
92,958
93,913
94,1061
95,912
96,821
97,1419
98,959
99,960
100,956
101,961
102,822
103,962
104,963
105,916
106,840
107,1062
108,964
109,965
110,966
111,967
112,917
113,968
114,969
115,970
116,971
117,918
118,841
119,919
120,920
121,921
122,972
123,1079
124,973
125,922
126,1103
127,923
128,924
129,925
130,1185
131,1184
132,1418
133,926
134,974
135,975
136,929
137,928
138,976
139,847
140,848
141,1081
142,977
143,849
144,978
145,927
146,979
147,980
148,981
149,1417
150,982
151,850
152,983
153,851
154,984
155,985
156,852
157,853
158,986
159,987
160,988
161,854
162,989
163,990
164,855
165,991
166,856
167,858
168,992
169,1416
170,993
171,994
172,995
173,859
174,996
175,997
176,860
177,998
178,999
179,1000
180,1001
181,1002
182,1029
183,861
184,1415
185,1104
186,1083
187,1084
188,1003
189,1338
190,1028
191,862
192,1004
193,1005
194,1085
195,863
196,1006
197,864
198,1007
199,865
200,866
201,1008
202,867
203,868
204,1009
205,869
206,1414
207,871
208,872
209,1010
210,1011
211,873
212,1012
213,1013
214,888
215,1014
216,1015
217,890
218,1016
219,1413
220,1017
221,1412
222,930
223,931
224,935
225,932
226,1019
227,1018
228,933
229,1411
230,1086
231,934
232,936
233,1020
234,1021
235,1022
236,937
237,938
238,955
239,1037
240,1038
241,1023
242,1410
243,1024
244,1025
245,1039
246,1409
247,1040
248,1041
249,1042
250,1026
251,1027
252,1044
253,1046
254,1043
255,1030
256,1078
257,1031
258,1077
259,1076
260,1033
261,1034
262,1035
263,1036
264,1075
265,1074
266,1073
267,1408
268,1072
269,1071
270,1070
271,1047
272,1048
273,1069
274,1068
275,1067
276,1066
277,1049
278,1050
279,1065
280,1407
281,1406
282,1051
283,1052
284,1064
285,1053
286,1054
287,1055
288,1063
289,1405
290,1404
291,1403
292,1056
293,1060
294,1402
295,1057
296,1058
297,1105
298,1059
299,1106
300,1080
301,1107
302,1108
303,1109
304,1110
305,1401
306,1082
307,1135
308,1134
309,1400
310,1133
311,1087
312,1132
313,1088
314,1089
315,1090
316,1091
317,1131
318,1130
319,1129
320,1128
321,1127
322,1092
323,1126
324,1125
325,1093
326,1124
327,1094
328,1123
329,1122
330,1095
331,1096
332,1121
333,1120
334,1097
335,1119
336,1118
337,1117
338,1116
339,1115
340,1114
341,1098
342,1099
343,1399
344,1398
345,1112
346,1111
347,1100
348,1101
349,1226
350,1397
351,1171
352,1102
353,1396
354,1225
355,1136
356,1395
357,1170
358,1169
359,1394
360,1137
361,1168
362,1393
363,1138
364,1167
365,1392
366,1391
367,1166
368,1165
369,1139
370,1140
371,1164
372,1390
373,1141
374,1163
375,1162
376,1389
377,1142
378,1388
379,1173
380,1143
381,1160
382,1144
383,1159
384,1145
385,1158
386,1157
387,1146
388,1147
389,1148
390,1172
391,1149
392,1156
393,1150
394,1161
395,1224
396,1155
397,1151
398,1222
399,1221
400,1152
401,1220
402,1219
403,1153
404,1218
405,1217
406,1174
407,1216
408,1175
409,1176
410,1177
411,1178
412,1215
413,1179
414,1214
415,1180
416,1213
417,1212
418,1211
419,1181
420,1210
421,1209
422,1186
423,1208
424,1387
425,1187
426,1207
427,1386
428,1206
429,1385
430,1205
431,1204
432,1384
433,1383
434,1188
435,1203
436,1189
437,1190
438,1202
439,1191
440,1192
441,1201
442,1193
443,1200
444,1223
445,1199
446,1257
447,1382
448,1318
449,1194
450,1195
451,1196
452,1197
453,1198
454,1320
455,1292
456,1381
457,1252
458,1339
459,1253
460,1321
461,1322
462,1254
463,1255
464,1323
465,1256
466,1324
467,1453
468,1325
469,1326
470,1327
471,1380
472,1276
473,1328
474,1329
475,1330
476,1275
477,1355
478,1274
479,1258
480,1357
481,1291
482,1259
483,1290
484,1260
485,1261
486,1271
487,1272
488,1277
489,1262
490,1263
491,1452
492,1264
493,1273
494,1265
495,1297
496,1289
497,1266
498,1288
499,1267
500,1268
501,1285
502,1269
503,1270
504,1331
505,1366
506,1287
507,1286
508,1278
509,1279
510,1379
511,1280
512,1281
513,1282
514,1283
515,1332
516,1295
517,1284
518,1296
519,1294
520,1307
521,1293
522,1308
523,1309
524,1310
525,1356
526,1311
527,1370
528,1298
529,1312
530,1299
531,1378
532,1454
533,1313
534,1333
535,1334
536,1300
537,1335
538,1301
539,1336
540,1352
541,1302
542,1303
543,1304
544,1305
545,1306
546,1351
547,1350
548,1349
549,1348
550,1314
551,1354
552,1315
553,1316
554,1317
555,1319
556,1359
557,1358
558,1337
559,1340
560,1341
561,1368
562,1342
563,1343
564,1344
565,1345
566,1367
567,1346
568,1347
569,1442
570,1360
571,1446
572,1361
573,1362
574,1363
575,1364
576,1369
577,1371
578,1372
579,1374
580,1375
581,1376
582,1377
583,1433
584,1434
585,1435
586,1436
587,1437
588,1438
589,1439
590,1440
591,1441
592,1443
593,1451
594,1450
595,1444
596,1449
597,1445
598,1448
599,1447
600,1457
601,1458
602,1455
603,1459
604,1460
605,1461
606,1462
607,1456
608,1463
609,1464
610,1465
611,1466
612,1467
613,1468
614,1469
615,1470
616,1471
617,1472
618,1473
619,2705
620,2689
621,2694
622,2695
623,2696
624,2697
625,2704
626,2708
627,2711
628,2712
629,2713
630,2714
631,2719
632,2723
633,2728
634,2740
635,2743
636,2744
637,2745
638,2752
639,2754
640,2755
641,2762
642,2763
643,2764
644,2765
645,2772
646,2773
647,2776
648,2778
649,2788
650,2789
651,2790
652,2793
653,2800
654,2801
655,2803
656,2804
657,2806
658,2808
659,2810
660,2809
661,2812
662,2811
663,2815
664,2817
665,2819
666,2818
667,2821
668,2820
669,2822
670,2823
671,2824
672,2825
673,2844
674,2846
675,2847
676,2858
677,2861
678,2862
679,2868
680,2870
681,2871
682,2872
683,2873
684,2874
685,2877
686,2878
687,2886
688,2887
689,2888
690,2889
691,2892
692,2893
693,2895
694,2903
695,2904
696,2905
697,2906
698,2907
699,2909
700,2912
701,2913
702,2915
703,2916
704,2919
705,2920
706,2922
707,2923
708,2924
709,2925
710,2926
711,2935
712,2936
713,2937
714,2938
715,2939
716,2945
717,2949
718,2952
719,2956
720,3006
721,3014
722,3015
723,3016
724,3017
725,3019
726,3022
727,3026
728,3029
729,3030
730,3033
731,3037
732,3039
733,3046
734,3047
735,3055
736,3056
737,3058
738,3059
739,3061
740,3062
741,3065
742,3072
743,3073
744,3074
745,3075
746,3078
747,3080
748,3082
749,3097
750,3099
751,3106
752,3109
753,3111
754,3113
755,3114
756,3115
757,3116
758,3123
759,3126
760,3127
761,3128
762,3129
763,3130
764,3131
765,3132
766,3137
767,3140
768,3150
769,3156
770,3168
771,3169
772,3170
773,3171
774,3187
775,3191
776,3194
777,3200
778,3207
779,3218
780,3229
781,3234
782,3238
783,3241
784,3246
785,3248
786,3249
787,3250
788,3251
789,3254
790,3257
791,3262
792,3263
793,3276
794,3282
795,3283
796,3286
797,3288
798,3291
799,3297
800,3298
801,3299
802,3302
803,3307
804,3312
805,3314
806,3315
807,3319
808,3320
809,3321
810,3328
811,3329
812,3335
813,3336
814,3338
815,3340
816,3353
817,3357
818,3365
819,3366
820,3369
821,3372
822,3373
823,3374
824,3383
825,3400
826,3402
827,3404
828,3405
829,3407
830,3412
831,3413
832,3415
833,3422
834,3423
835,3424
836,3425
837,3427
838,3428
839,3430
840,3435
841,3436
842,3438
843,3439
844,3441
845,3444
846,3447
847,3449
848,3450
849,3451
850,3459
851,3460
852,3464
853,3467
854,3468
855,3469
856,3472
857,3473
858,3474
859,3478
860,3485
861,3486
862,3491
863,3492
864,3493
865,3494
866,3495
867,3497
868,3499
869,3500
870,3501
871,3502
872,3503
873,3508
874,3518
875,3533
876,3544
877,3545
878,3547
879,3552
880,3554
881,3555
882,3557
883,3558
884,3559
885,3564
886,3567
887,3568
888,3574
889,3577
890,3580
891,3581
892,3584
893,3585
894,3586
895,3587
896,3590
897,3591
898,3594
899,3620
900,3622
901,3625
EOT;

  $rows = explode("\n", $map_string);
  $map = array();

  foreach ($rows as $row) {
    $mapping = explode(',', $row);
    $map[$mapping[1]] = $mapping[0];
  }

  foreach ($variables['themed_rows'] as &$row) {
    $nid = str_replace('"', '', $row['nid']);
    $row['counter'] = $map[$nid] ? $map[$nid] : 'N/A';
  }
}
