<?php
/**
 * @file
 * Code for the DGU Data set request feature.
 */


define('DATA_REQUEST_MODERATION_PERMISSION', 'edit any dataset_request content');
define('PUBLIC_DATA_REQUEST_GRANT', 2147483647);    // maximum possible value (avialable in Solr) to avoid conflict with $node->uid
define('DATA_REQUEST_MODERATOR_GRANT', 2147483646); // maximum possible value (avialable in Solr) -1 to avoid conflict with $node->uid
define('DATA_REQUEST_CKAN_ADMIN_GRANT', 2147483645); // maximum possible value (avialable in Solr) -2 to avoid conflict with $node->uid

include_once 'dgu_data_set_request.features.inc';

/*
 * Implements hook_ctools_plugin_directory().
 */
function dgu_data_set_request_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_libraries_info_file_paths().
 */
function dgu_data_set_request_libraries_info_file_paths() {
  $d3_libraries = drupal_get_path('module', 'dgu_data_set_request') . '/libraries/';
  foreach (dgu_data_set_request_d3_libraries() as $library) {
    $paths[] = $d3_libraries . $library;
  }
  return $paths;
}

/**
 * Implements hook_libraries_info_alter().
 */
function dgu_data_set_request_libraries_info_alter(&$libraries) {
  $path = drupal_get_path('module', 'dgu_data_set_request') . '/libraries/';
  foreach (dgu_data_set_request_d3_libraries() as $library) {
    // Change library path to path/to/module/d3/libraries
    $libraries[$library]['library path'] = $path . $library;
  }
}

/**
 * Helper callback to return all d3 libraries located inside this module.
 */
function dgu_data_set_request_d3_libraries() {
  $module_path = drupal_get_path('module', 'dgu_data_set_request');
  $d3_libraries = str_replace($module_path . '/libraries/', '', glob($module_path . '/libraries/*' , GLOB_ONLYDIR));
  return $d3_libraries;
}

/**
 * Implements hook_dgu_moderation_moderator_permission().
 */
function dgu_data_set_request_dgu_moderation_moderator_permission(&$node) {
  if ($node->type == 'dataset_request') {
    if (user_access(DATA_REQUEST_MODERATION_PERMISSION) || is_or_was_assignee($node->nid)) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function dgu_data_set_request_menu_breadcrumb_alter(&$active_trail, $item) {
  switch ($item['path']) {
    case 'data-request':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('Latest data requests');
      break;
    case 'data-request/blogs':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('ODUG Blogs');
      break;
    case 'data-request/minutes':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('ODUG Minutes');
      break;
  }
  if (isset($item['map'][1]->type) && $item['map'][1]->type == 'dataset_request') {
    $active_trail[2] = $active_trail[1];
    $active_trail[1] = array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array());

    if (isset($item['map'][2]) && $item['map'][2] == 'edit') {
      unset($active_trail[2]);
    }

  }
}


/**
 * Implements Hook hook_form_FORM_ID_alter which:
 */
function dgu_data_set_request_form_dataset_request_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  drupal_set_title('Create a dataset request');
  unset($form['actions']['preview']);
  $form['#attributes']['class'][] = "boxed";

  if (user_access(DATA_REQUEST_MODERATION_PERMISSION) || (isset($node->nid) && is_or_was_assignee($node->nid))) {
    $form['#after_build'][] = 'dgu_moderation_node_forms_after_build';

    $form['submit_top'] = $form['actions']['submit'];
    $form['submit_top']['#weight'] = -100;
    $form['#attached']['css'][] = array(
      'data' => '#edit-submit-top {float: right;}',
      'type' => 'inline',
    );
    $assignee_uids = dgu_data_set_request_get_assignees($node->nid);
    $assignees = array();
    foreach($assignee_uids as $uid) {
      $user = user_load($uid);
      if (empty($form['field_assignee'][LANGUAGE_NONE]['#default_value'][0]) || isset($form['field_assignee'][LANGUAGE_NONE]['#default_value'][0]) && $form['field_assignee'][LANGUAGE_NONE]['#default_value'][0] != $user->uid) {
        $assignees[] = $user->name;
      }
    }
    if(!empty($assignees)) {
      $assignees = '<div class="help-block">Previous RM\'s: ' . implode(', ', $assignees) . '</div>';
      $form['field_assignee']['#suffix'] = $assignees;
    }
  }

  else {
    dgu_moderation_node_forms_alter($form);
  }

  $form['#validate'][] = 'dgu_data_set_request_form_validate';
  $form['#submit'][] = 'dgu_data_set_request_form_submit';
}

function dgu_data_set_request_form_validate($form, &$form_state) {
  if (isset($form_state['values']['field_review_outcome'][LANGUAGE_NONE][0]['value']) && ($form_state['values']['field_review_outcome'][LANGUAGE_NONE][0]['value'] == '0' || $form_state['values']['field_review_outcome'][LANGUAGE_NONE][0]['value'] == 2)) {
    if(empty($form_state['values']['field_data_set_link'][LANGUAGE_NONE][0]['url'])) {
      form_set_error('field_organisation_type', 'Dataset link field is required.');
    }
  }
}

function dgu_data_set_request_form_submit($form, &$form_state) {
  if (isset($form_state['values']['field_review_status'][LANGUAGE_NONE][0]['value']) && ($form_state['values']['field_review_status'][LANGUAGE_NONE][0]['value'] != '6')) {
    // Empty outcome field if a request is re-opened.
    $form_state['node']->field_review_outcome = array();
  }
}

function dgu_data_set_request_get_assignees($nid) {
  // TODO add static cache
  $query = db_select('field_revision_field_assignee', 'fpa')
    ->distinct()
    ->fields('fpa', array('field_assignee_uid'))
    ->condition('entity_type', 'node')
    ->condition('entity_id', $nid);
  return $query->execute()->fetchCol();
}

function dgu_data_set_request_node_access($node, $op, $account) {
  if ($op != 'create' && $node->type == 'dataset_request') {
    if(!($node->uid == $account->uid || user_access(DATA_REQUEST_MODERATION_PERMISSION))) {
      if(isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
        if(isset($node->field_publisher_ref[LANGUAGE_NONE][0]['id']) && isset($account->data['ckan_publishers'][$node->field_publisher_ref[LANGUAGE_NONE][0]['id']]) && $account->data['ckan_publishers'][$node->field_publisher_ref[LANGUAGE_NONE][0]['id']] == 'admin') {
          return NODE_ACCESS_ALLOW;
        }
        $assignees = dgu_data_set_request_publisher_assignee_get_assignees($node->nid);
        if(!in_array($account->uid, $assignees)) {
          return NODE_ACCESS_DENY;
        }

      }
    }
  }
}

function dgu_data_set_request_node_access_records($node) {
  if ($node->type == 'dataset_request') {

    $assignees = dgu_data_set_request_publisher_assignee_get_assignees($node->nid);

    $grants = array();
    if (isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
      // Private request
      $grants[] = array(
        'realm' => 'private_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 1,
      );
      $grants[] = array(
        'realm' => 'private_data_request',
        'gid' => DATA_REQUEST_CKAN_ADMIN_GRANT,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1,
      );
      if ($node->uid) {
        // Grant author permission only if author is not anonymous.
        $grants[] = array(
          'realm' => 'private_data_request',
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 1,
        );
      }
      if (!empty($assignees)) {
        // Grant permission to all users which are or were assignees in this request.
        foreach($assignees as $assignee_uid) {
          $grants[] = array(
            'realm' => 'private_data_request',
            'gid' => $assignee_uid,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 1,
          );
        }
      }
    }
    else {
      // Public request
      $grants[] = array(
        'realm' => 'public_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 1,
      );
      if ($node->uid) {
        // Grant author permission only if author is not anonymous.
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 1,
        );
      }
      if (!empty($assignees)) {
        // Grant permission to all users which are or were assignees in this request.
        foreach($assignees as $assignee_uid) {
          $grants[] = array(
            'realm' => 'public_data_request',
            'gid' => $assignee_uid,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 1,
          );
        }
      }
      if ($node->status == 1) {
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => PUBLIC_DATA_REQUEST_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 1,
        );
      }
    }
    return $grants;
  }
}

function dgu_data_set_request_node_grants($account, $op) {
  $grants = array();
  $grants['private_data_request'] = array($account->uid);
  $grants['public_data_request'] = array($account->uid, PUBLIC_DATA_REQUEST_GRANT);
  if (user_access(DATA_REQUEST_MODERATION_PERMISSION, $account)) {
    $grants['private_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
    $grants['public_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
  }
  if (!empty($account->data['ckan_publishers']) && in_array('admin', $account->data['ckan_publishers'])) {
    $grants['private_data_request'][] = DATA_REQUEST_CKAN_ADMIN_GRANT;
  }
  return $grants;
}


/**
 * Implements hook_assignee_get_users().
 */
function dgu_data_set_request_assignee_get_users($field = NULL, $instance = NULL, $entity_type = NULL, $entity) {

  $query = db_select('role', 'r');
  $query->join('users_roles', 'ur', 'r.rid = ur.rid');
  $query->join('users', 'u', 'u.uid = ur.uid');
  $query->fields('ur', array('uid'))
        ->fields('u', array('name'))
        ->condition('r.name', 'data request administrator');
  $users = $query->execute()->fetchAll();

  $options = array();
  foreach ($users as $user) {
    $options[$user->uid] = $user->name;
  }

  return $options;
}

/**
 * Implements hook_node_presave().
 */
function dgu_data_set_request_node_presave($node) {
  if ($node->type == 'dataset_request') {
    $previous_data_request_revision = &drupal_static('previous_data_request_revision');

    // Workbench moderation uses shutdown function to update the node for the second time in the same request.
    // To avoid messages being created twice we ignore second node update in single request.
    if (isset($previous_data_request_revision)) {
      $updates_to_ignore = &drupal_static('node_updates_to_ignore');
      $updates_to_ignore = isset($updates_to_ignore) ? $updates_to_ignore : array();
      $updates_to_ignore[] = $node->nid;
    }

    // Store previous revision of the node in static cache to be available for comparison in hook_node_update().
    $previous_data_request_revision = node_load($node->nid);
  }
}

/**
 * Implements hook_entity_insert().
 */
function dgu_data_set_request_entity_insert($entity, $type) {
  if($type == 'reply' && $entity->bundle == 'review_comment' && module_exists('message_subscribe')) {
    // This is taken from message stack examples.
    // It's related to message_notify how it stores rendered subject and body via view modes.
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );
    $data_request_admin_roles = variable_get('dgu_data_set_request_data_request_admin_roles',array(3, 6, 10)); // 3 = administrator, 6 = data publisher, 10 = data request administrator

    // Get data_request_update message bundle and set required fields.
    $message = message_create('data_request_review_comment_new');
    $wrapper = entity_metadata_wrapper('message', $message);
    $data_request_node = new stdClass();
    $data_request_node->nid = $entity->entity_id;
    $wrapper->field_data_request_reference->set($data_request_node);
    $wrapper->field_reply_reference->set($entity);

    $uids = _dgu_data_set_request_get_subscribers($data_request_node->nid, $data_request_admin_roles, FALSE);
    message_subscribe_send_message('node', $data_request_node, $message, $options, array('uids' => $uids));

  }
}

/**
 * Implements hook_node_update().
 */
function dgu_data_set_request_node_update($node) {
  if ($node->type == 'dataset_request' && module_exists('message_subscribe')) {

    // Ignore second node update in single request.
    // See dgu_data_set_request_node_presave();
    $updates_to_ignore = &drupal_static('node_updates_to_ignore');
    if (is_array($updates_to_ignore) && in_array($node->nid, $updates_to_ignore)) {
      return;
    }

    // Don't create a message about moderation here, there should be
    // an universal message about moderation state change for all content types.
    if (empty($node->workbench_moderation_state_current) && $node->workbench_moderation['current']->from_state == 'needs_review' && $node->workbench_moderation['current']->state == 'published'
      || $node->workbench_moderation['current']->from_state == 'needs_review' && $node->workbench_moderation['current']->state == 'draft') {
      return;
    }

    $previous_data_request_revision = &drupal_static('previous_data_request_revision');
    $previous_rm = isset($previous_data_request_revision->field_assignee[LANGUAGE_NONE][0]['uid']) ? $previous_data_request_revision->field_assignee[LANGUAGE_NONE][0]['uid'] : NULL;
    $previous_publisher_assignee = isset($previous_data_request_revision->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) ? $previous_data_request_revision->field_publisher_assignee[LANGUAGE_NONE][0]['uid'] : NULL;

    $fields_for_short_summary = array('field_review_status' => 'value', 'field_review_outcome' =>'value', 'field_review_notes' => 'value');
    $data_request_admin_roles = variable_get('dgu_data_set_request_data_request_admin_roles',array(3, 6, 10, 12)); // 3 = administrator, 6 = data publisher, 10 = data request administrator, 12 = editor

    // This is taken from message stack examples.
    // It's related to message_notify how it stores rendered subject and body via view modes.
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );

    // Use static cache to get this summary available in hook_tokens().
    $summary_of_changes = &drupal_static('data_request_summary_of_changes');

    if (isset($node->field_assignee[LANGUAGE_NONE][0]['uid']) && $previous_rm != $node->field_assignee[LANGUAGE_NONE][0]['uid']
     || isset($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) && $previous_publisher_assignee != $node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) {

      // There is a new publisher assignee or new RM, this is special case where an assignee
      // must receive different message than all other subscribers.
      if (isset($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) && $previous_publisher_assignee != $node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) {
        $assignee = user_load($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']);
      }
      else {
        $assignee = user_load($node->field_assignee[LANGUAGE_NONE][0]['uid']);
      }

      // Get data_request_assignee message bundle and set required fields.
      $message_assignee = message_create('data_request_assignee');
      $wrapper = entity_metadata_wrapper('message', $message_assignee);
      $wrapper->field_data_request_reference->set($node);
      $wrapper->field_data_request_assignee->set($assignee);

      $default_notifier = variable_get('message_subscribe_default_notifiers', array('email' => 'email'));
      $notifier = isset($assignee->field_digest_notifier[LANGUAGE_NONE][0]['value']) ? array($assignee->field_digest_notifier[LANGUAGE_NONE][0]['value'] => $assignee->field_digest_notifier[LANGUAGE_NONE][0]['value']) : $default_notifier;
      $subscribe_options = array(
        'uids' => array(
          $assignee->uid => array(
            'notifiers' => $notifier,
          ),
        ),
      );

      message_subscribe_send_message('node', $node, $message_assignee, $options, $subscribe_options);

      // Temporarily unsubscribe current assignee to avoid sending two messages
      // to this person (one about being current assignee, second about request update event)
      // if this person was subscribed before (e.g. was already an assignee before).
      flag('unflag', 'subscribe_node', $node->nid, $assignee);

      // Send data_request_update message to all subscribers.
      // First test if particular fields has changed and notify all non admin users.
      if(_dgu_data_set_request_fields_changed($fields_for_short_summary, $node, $previous_data_request_revision)) {

        // Get data_request_update message bundle and set required fields.
        $message_update = message_create('data_request_update');
        $wrapper = entity_metadata_wrapper('message', $message_update);
        $wrapper->field_data_request_reference->set($node);

        $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision, $fields_for_short_summary);
        $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles, FALSE);
        message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $uids));

      }
      // Then notify admin users with full summary of changes.
      // Get data_request_update message bundle and set required fields.
      $message_update = message_create('data_request_update');
      $wrapper = entity_metadata_wrapper('message', $message_update);
      $wrapper->field_data_request_reference->set($node);

      $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision);
      $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles);
      message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $uids));

      // Subscribe an assignee to following notifications about data request updates.
      flag('flag', 'subscribe_node', $node->nid, $assignee);
    }
    else {
      // Something else than assignee has been changed, simply notify all subscribers.

      // First notify admin users with full summary of changes.

      // Get data_request_update message bundle and set required fields.
      $message_update = message_create('data_request_update');
      $wrapper = entity_metadata_wrapper('message', $message_update);
      $wrapper->field_data_request_reference->set($node);

      $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision);
      $admin_uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles);
      message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $admin_uids));

      // Then test if public fields has changed and notify all non admin users.
      if(_dgu_data_set_request_fields_changed($fields_for_short_summary, $node, $previous_data_request_revision)) {
        // Get data_request_update message bundle and set required fields.
        $message_update = message_create('data_request_update');
        $wrapper = entity_metadata_wrapper('message', $message_update);
        $wrapper->field_data_request_reference->set($node);

        $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision, $fields_for_short_summary);
        $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles, FALSE);
        $non_admin_uids = array_diff($uids, $admin_uids);
        message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $non_admin_uids));
      }
    }
  }
}


/**
 * Helper function to test if particular fields has changed between revisions.
 */
function _dgu_data_set_request_get_subscribers($nid, $rids, $in_rids = TRUE) {
  // Get all flags on given entity type.
  $flags = message_subscribe_flag_get_flags('node');
  $default_notifier = variable_get('message_subscribe_default_notifiers', array('email' => 'email'));
  $fids = array();
  foreach ($flags as $flag) {
    $fids[$flag->fid] = $flag->name;
  }
  // Query all the entity IDs inside the given flags. We don't use
  // flag_get_content_flags() as we want to get all the flaggings of an
  // entity-type in a single query.
  $query = db_select('flagging', 'f');
  $query->join('users', 'u', 'u.uid = f.uid');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('field_data_field_digest_notifier', 'fdn', 'fdn.entity_id = u.uid');
  $query->fields('f', array('uid'));
  $query->fields('fdn', array('field_digest_notifier_value'))
    ->distinct()
    ->condition('f.entity_type', 'node')
    ->condition('f.entity_id', $nid)
    ->condition('fid', array_keys($fids), 'IN');
  if ($in_rids == TRUE) {
    $query->condition('ur.rid', $rids, 'IN');
  }
  else {
    $query->condition(db_or()->where('ur.rid NOT IN (' . implode (', ', $rids) . ')')->isNull('ur.rid'));
  }
  $result = $query->execute()->fetchAll();
  $uids = array();
  foreach ($result as $row) {
    $uids[$row->uid]['notifiers'] = isset($row->field_digest_notifier_value) ? array($row->field_digest_notifier_value => $row->field_digest_notifier_value) : $default_notifier;
  }
  return $uids;
}

/**
 * Helper function to test if particular fields has changed between revisions.
 */
function _dgu_data_set_request_fields_changed($fields_for_short_summary, $current_revision, $previous_revision) {
  foreach ($fields_for_short_summary as $field_name => $key) {
    $field_current_revision = isset($current_revision->{$field_name}[LANGUAGE_NONE][0][$key]) ? $current_revision->{$field_name}[LANGUAGE_NONE][0][$key] : NULL;
    $field_previous_revision = isset($previous_revision->{$field_name}[LANGUAGE_NONE][0][$key]) ? $previous_revision->{$field_name}[LANGUAGE_NONE][0][$key] : NULL;
    if ($field_current_revision !== $field_previous_revision) {
      return TRUE;
    }
  }
}

/**
 * Helper function to get summary of changes used in notification about data request update.
 */
function _dgu_data_request_get_summary_of_changes($current_revision, $previous_revision, $fields = array()) {

  //TODO use $fields to render particular summary

  $changes = array();
  $current_request = node_view($current_revision);
  $previous_request = node_view($previous_revision);

  foreach ((array)$current_request['#node'] as $key => $value) {
    // Iterate through all fields.
    if(strpos($key, 'field_') === 0) {
      if(!empty($fields)) {
        if(!in_array($key, array_keys($fields))) {
          continue;
        }
      }

      if ((isset($current_request[$key]['#items']) && !isset($previous_request[$key]['#items']))
       || (!isset($current_request[$key]['#items']) && isset($previous_request[$key]['#items']))
       || (isset($current_request[$key]['#items']) && isset($previous_request[$key]['#items']) && count($current_request[$key]['#items']) != count($previous_request[$key]['#items']))) {
        // If multi value field had different quantity of items it is modified.
        _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, $changes);
      }
      else {
        // Otherwise compare the values.
        $current_node = clone $current_request['#node'];
        $previous_node = clone $previous_request['#node'];

        if (isset($current_node->{$key}[LANGUAGE_NONE])) {
          foreach ($current_node->{$key}[LANGUAGE_NONE] as $index => &$item) {

            // Fix weird discrepancy on text_log fields, for some reason current revision has
            // only 'value' element, previous revision has also 'safe_value' and 'format'.
            $item['format'] = FALSE;
            $item['safe_value'] = FALSE;
            $previous_node->{$key}[LANGUAGE_NONE][$index]['format'] = FALSE;
            $previous_node->{$key}[LANGUAGE_NONE][$index]['safe_value'] = FALSE;

            if ($item != $previous_node->{$key}[LANGUAGE_NONE][$index]) {
              _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, $changes);
            }
          }
        }
      }
    }

  }

  if (!empty($changes)) {
    // Render summary.
    $output = "Summary of changes:\n";
    foreach ($changes as $field_name => $diff) {
      $output .= 'Field "' . $field_name . '" changed' . "\n";
      $output .= 'from: ' . $diff['previous'] . "\n";
      $output .= 'to:   ' . $diff['current'] . "\n";
      $output .= "\n";
    }
    return $output;
  }
}

/**
 * Helper function to render changes in a single field.
 */
function _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, &$changes) {
  $new_value = field_view_field('node', $current_revision, $key);
  $old_value = field_view_field('node', $previous_revision, $key);

  $new_value['#label_display'] = 'hidden';
  $old_value['#label_display'] = 'hidden';

  $title = $new_value['#title'] ? $new_value['#title'] : $old_value['#title'];

  $changes[$title] = array (
    'current' => substr(_dgu_data_set_request_remove_multiple_commas(strip_tags(str_replace('</', ', </', render($new_value)))), 0, -2),
    'previous' => substr(_dgu_data_set_request_remove_multiple_commas(strip_tags(str_replace('</', ', </', render($old_value)))), 0, -2),
  );
}

/**
 * Helper recursive function to get rid of multiple commas added before
 * each closing HTML tag in _dgu_data_set_request_render_changes() function.
 */
function _dgu_data_set_request_remove_multiple_commas($string) {
  $string = str_replace(', , ', ', ', $string);
  if (strpos($string, ', , ') !== FALSE) {
    $string = _dgu_data_set_request_remove_multiple_commas($string);
  }
  return $string;
}


/**
* Implements hook_token_info().
*/
function dgu_data_set_request_token_info() {
  $info['tokens']['message']['data_request-summary_of_changes'] = array(
    'name' => t('Data request - summary of changes'),
    'description' => t('Returns summary of changes in modified data request'),
  );
  return $info;
}
/**
* Implements hook_tokens().
*/
function dgu_data_set_request_tokens($type, $tokens, array $data = array(), array $options = array()) {
 $replacements = array();
   if ($type == 'message') {
     foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'data_request-summary_of_changes':
          $replacements[$original] = drupal_static('data_request_summary_of_changes');
          break;
      }
     }
  }
  return $replacements;
}

/**
 * Implements hook_preprocess_replies().
 */
function  dgu_data_set_request_preprocess_replies(&$variables) {
  if ($variables['bundle'] == 'review_comment' && $variables['entity_type'] == 'node') {
    if(!node_access('update', $variables['entity'])) {
      global $user;
      $assignees = dgu_data_set_request_publisher_assignee_get_assignees($variables['entity_id']);
      // Check if current user is or wes publisher assignee or if is an admin for referenced publisher or parent publisher.
      if(!in_array($user->uid, $assignees) && !(isset($variables['entity']->field_publisher_ref[LANGUAGE_NONE][0]['id']) && in_array($variables['entity']->field_publisher_ref[LANGUAGE_NONE][0]['id'], dgu_user_get_admin_publishers()))) {
        // Hide reply forms for users which haven't got access to edit entity.
        // We need to give them full access to create/update review_comment replies
        // but only on nodes they have permissions to edit, e.g data request assignee grant.
        unset($variables['replies']);
        unset($variables['reply_form']);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function dgu_data_set_request_form_reply_add_form_alter(&$form, &$form_state, $form_id) {
  if($form['#bundle'] == 'review_comment') {
    $form['field_review_comment'][LANGUAGE_NONE][0]['#title'] = 'Add review note <span class="submitted">(for non-public view)</span>';
    $form['submit']['#value'] = 'Submit review note';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function dgu_data_set_request_preprocess_page(&$variables) {
  if (arg(0) == 'user' || arg(0) == 'admin') {
    if($count = _dgu_data_set_request_active_requests_publisher_admin_count()) {
      $link_title = 'view ' . format_plural($count, 'it', 'these') . ' now';
      drupal_set_message(
        'There ' . format_plural($count, 'is ', 'are ') . $count . ' active data ' . format_plural($count, 'request', 'requests')
        . ' for publishers that you administer, <a class="publishers-active-requests-link" href="/admin/workbench/content/data-requests?field_review_status_value%5B%5D=1&field_review_status_value%5B%5D=2&field_review_status_value%5B%5D=3&field_review_status_value%5B%5D=4&field_review_status_value%5B%5D=5&title=&field_publication_preference_value=All&field_barriers_reason_value=All&field_assignee_uid=All&field_publisher_ref_id=All&field_publisher_assignee_uid=All&items_per_page=25">'
        . $link_title . '</a>.<br />See <a href="/help?tour=data_requests_practitioners_guide">Data requests practitioners guide</a>.'
      );
    }
    if($count = _dgu_data_set_request_active_requests_publisher_assignee_count()) {
      $link_title = 'view ' . format_plural($count, 'it', 'these') . ' now';
      drupal_set_message(
        'You have ' . $count . ' active data ' . format_plural($count, 'request', 'requests')
        . ' that need' . format_plural($count, 's', '')
        . ' review, <a class="active-requests-link" href="/admin/workbench/content/active">'
        . $link_title . '</a>.<br />See <a href="/help?tour=data_requests_user_guide">Data requests user guide</a>.'
      );
    }
  }
}

function _dgu_data_set_request_active_requests_publisher_assignee_count() {
  global $user;
  if (in_array('data publisher', $user->roles)) {
    $query = db_select('field_data_field_publisher_assignee', 'a');
    $query->fields('a');
    $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
    $query->condition('a.field_publisher_assignee_uid', $user->uid)
      ->condition('s.field_review_status_value', 0, '<>')
      ->condition('s.field_review_status_value', 6, '<>');
    $result = $query->execute();
    return $result->rowCount();
  }
}

function _dgu_data_set_request_active_requests_publisher_admin_count() {
  global $user;
  if (in_array('data publisher', $user->roles) && !empty($user->data['ckan_publishers']) && in_array('admin', $user->data['ckan_publishers'])) {

    $publishers = array();
    foreach ($user->data['ckan_publishers'] as $publisher_id => $capacity) {

      if($capacity == 'admin' && !in_array($publisher_id, $publishers)) {
        $publishers = array_merge($publishers, dgu_user_get_publisher_with_children($publisher_id));
      }
    }

    $query = db_select('field_data_field_publisher_ref', 'p');
    $query->join('node', 'n', 'n.nid = p.entity_id');
    $query->fields('p');
    $query->join('field_data_field_review_status', 's','p.entity_id = s.entity_id');
    $query->condition('s.field_review_status_value', 0, '<>')
      ->condition('s.field_review_status_value', 6, '<>')
      ->condition('p.field_publisher_ref_id', $publishers, 'IN');
    $query->addTag('node_access');
    $result = $query->execute();
    return $result->rowCount();
  }
}


/**
 * Implements hook_bootstrap_tour_alter().
 */
function dgu_data_set_request_bootstrap_tour_alter($tour) {
  global $user;
  foreach($tour->steps as &$step) {
    if (substr($step['path'], 0, 13) == 'tour-redirect') {
      $redirect = substr($step['path'], 14);
      switch ($redirect) {
        case 'active-data-request':
          $query = db_select('field_data_field_publisher_assignee', 'a');
          $query->fields('a', array('entity_id'));
          $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
          $query->join('node', 'n','a.entity_id = n.nid');
          $query->condition('a.field_publisher_assignee_uid', $user->uid)
            ->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->orderBy('n.nid', 'DESC');
          $active_request_nid = $query->execute()->fetchField();
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = drupal_get_path_alias('node/' . $active_request_nid) . '?' . $query;
          break;
        case 'publisher-active-data-request-url':
          $query_parameters = drupal_get_query_parameters();
          $query_parameters['field_review_status_value'] = array('1','2','3','4','5');
          $query_parameters['field_publication_preference_value'] = 'All';
          $query_parameters['field_barriers_reason_value'] = 'All';
          $query_parameters['field_assignee_uid'] = 'All';
          $query_parameters['field_publisher_ref_id'] = 'All';
          $query_parameters['field_publisher_assignee_uid'] = 'All';
          $query_parameters['items_per_page'] = '25';
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = 'admin/workbench/content/data-requests' . '?' . $query;
          break;
        case 'publisher-active-data-request':
          $publishers = array();
          foreach ($user->data['ckan_publishers'] as $publisher_id => $capacity) {
            if($capacity == 'admin' && !in_array($publisher_id, $publishers)) {
              $publishers = array_merge($publishers, dgu_user_get_publisher_with_children($publisher_id));
            }
          }
          $query = db_select('field_data_field_publisher_ref', 'p');
          $query->join('node', 'n', 'n.nid = p.entity_id');
          $query->fields('p', array('entity_id'));
          $query->join('field_data_field_review_status', 's','p.entity_id = s.entity_id');
          $query->join('node', 'n','p.entity_id = n.nid');
          $query->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->condition('p.field_publisher_ref_id', $publishers, 'IN')
            ->orderBy('n.nid', 'DESC');
          $query->addTag('node_access');
          $active_request_nid = $query->execute()->fetchField();
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = drupal_get_path_alias('node/' . $active_request_nid) . '?' . $query;
          break;
        case 'active-data-request-author':
          $query = db_select('field_data_field_publisher_assignee', 'a');
          $query->fields('a', array('entity_id'));
          $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
          $query->condition('a.field_publisher_assignee_uid', $user->uid)
            ->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->orderBy('entity_id', 'DESC');
          $active_request_nid = $query->execute()->fetchField();
          $active_request = node_load($active_request_nid);
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = drupal_get_path_alias('user/' . $active_request->uid) . '?' . $query;
          break;

        case 'active-data-request-author-contact':
          $query = db_select('field_data_field_publisher_assignee', 'a');
          $query->fields('a', array('entity_id'));
          $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
          $query->condition('a.field_publisher_assignee_uid', $user->uid)
            ->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->orderBy('entity_id', 'DESC');
          $active_request_nid = $query->execute()->fetchField();
          $active_request = node_load($active_request_nid);
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = 'user/' . $active_request->uid . '/contact?' . $query;
          break;
      }
    }
  }
}


/**
 * Implements hook_views_pre_view().
 */
function dgu_data_set_request_views_pre_view(&$view, &$display_id, &$args) {
  global $user;
  // If not moderator or editor then unset 'Data request' view header which tells about 'Needs review' page.
  if ($view->name == 'data_requests_administration' && $display_id == 'page_1') {
    if (!in_array('moderator', $user->roles) && !in_array('editor', $user->roles)) {
      $view->set_item_option($display_id, 'header', 'area', 'content', '');
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function dgu_data_set_request_views_query_alter(&$view, &$query) {
  global $user;
  if ($view->name == 'data_requests_administration' && $view->current_display == 'page_1' && !in_array('data request administrator', $user->roles) && !in_array('editor', $user->roles)) {
    $publishers = array();
    if (!empty($user->data['ckan_publishers']) && in_array('admin', $user->data['ckan_publishers'])) {
      // Limit requests only to publisher (with all sub publishers) in which current user has 'admin' capacity.
      $publishers = dgu_user_get_admin_publishers();
    }
    elseif (in_array('data publisher', $user->roles)) {
      // Limit requests only to publishers (without sub publishers) in which current user has 'editor' capacity.
      $full_account = user_load($user->uid);

      foreach ($full_account->field_publishers[LANGUAGE_NONE] as $publisher_ref) {
        $publishers[] = $publisher_ref['target_id'];
      }
    }
    else {
      return;
    }

    $query->where[1]['conditions'][] = array(
      'field' => 'field_data_field_publisher_ref.field_publisher_ref_id',
      'value' => array($publishers),
      'operator' => 'in'
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dgu_data_set_request_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['view']->name == 'data_requests_administration' && $form_state['view']->current_display == 'page_1') {

    if ($admin_publishers = dgu_user_get_admin_publishers()) {
      // Remove publishers which are filtered out in dgu_user_views_query_alter() from exposed filter.
      foreach ($form['field_publisher_ref_id']['#options'] as $key => $value) {
        if (!in_array($key, $admin_publishers) && $key != 'All') {
          unset($form['field_publisher_ref_id']['#options'][$key]);
        }
      }

      $query = db_select('field_data_field_publisher_assignee', 'pa');
      $query->join('field_data_field_publisher_ref', 'p', 'p.entity_id = pa.entity_id');
      $query->fields('pa', array('field_publisher_assignee_uid'))
        ->condition('p.field_publisher_ref_id', $admin_publishers, 'IN')
        ->distinct();
      $publisher_assignees = $query->execute()->fetchCol();

      // Also remove not relevant publisher assignees.
      foreach ($form['field_publisher_assignee_uid']['#options'] as $key => $value) {
        if (!in_array($key, $publisher_assignees) && $key != 'All') {
          unset($form['field_publisher_assignee_uid']['#options'][$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_process_views_data_export_csv_body().
 */
function dgu_data_set_request_process_views_data_export_csv_body(&$variables) {

  $map_string = <<<EOT
1:940,
2:939,
3:1431,
4:831,
5:1432,
6:830,
7:880,
8:837,
9:839,
10:835,
11:836,
12:879,
13:942,
14:878,
15:877,
16:876,
17:1430,
18:891,
19:1429,
20:881,
21:882,
22:945,
23:894,
24:893,
25:883,
26:943,
27:892,
28:1182,
29:944,
30:1353,
31:899,
32:898,
33:884,
34:897,
35:885,
36:946,
37:896,
38:886,
39:895,
40:825,
41:950,
42:870,
43:902,
44:901,
45:1428,
46:887,
47:823,
48:900,
49:817,
50:949,
51:948,
52:947,
53:1427,
54:907,
55:834,
56:906,
57:832,
58:951,
59:905,
60:904,
61:952,
62:1424,
63:953,
64:833,
65:903,
66:1426,
67:911,
68:1425,
69:829,
70:828,
71:910,
72:827,
73:1423,
74:909,
75:1422,
76:957,
77:818,
78:954,
79:908,
80:915,
81:1421,
82:1183,
83:1420,
84:819,
85:820,
86:914,
87:958,
88:913,
89:1061,
90:912,
91:821,
92:1419,
93:959,
94:960,
95:956,
96:961,
97:822,
98:962,
99:963,
100:916,
101:840,
102:1062,
103:964,
104:965,
105:966,
106:967,
107:917,
108:968,
109:969,
110:970,
111:971,
112:918,
113:841,
114:919,
115:920,
116:921,
117:972,
118:1079,
119:973,
120:922,
121:1103,
122:923,
123:924,
124:925,
125:1185,
126:1184,
127:1418,
128:926,
129:974,
130:975,
131:929,
132:928,
133:976,
134:847,
135:848,
136:1081,
137:977,
138:849,
139:978,
140:927,
141:979,
142:980,
143:981,
144:1417,
145:982,
146:850,
147:983,
148:851,
149:984,
150:985,
151:852,
152:853,
153:986,
154:987,
155:988,
156:854,
157:989,
158:990,
159:855,
160:991,
161:856,
162:858,
163:992,
164:1416,
165:993,
166:994,
167:995,
168:859,
169:996,
170:997,
171:860,
172:998,
173:999,
174:1000,
175:1001,
176:1002,
177:1029,
178:861,
179:1415,
180:1104,
181:1083,
182:1084,
183:1003,
184:1338,
185:1028,
186:862,
187:1004,
188:1005,
189:1085,
190:863,
191:1006,
192:864,
193:1007,
194:865,
195:866,
196:1008,
197:867,
198:868,
199:1009,
200:869,
201:1414,
202:871,
203:872,
204:1010,
205:1011,
206:873,
207:1012,
208:1013,
209:888,
210:1014,
211:1015,
212:890,
213:1016,
214:1413,
215:1017,
216:1412,
217:930,
218:931,
219:935,
220:932,
221:1019,
222:1018,
223:933,
224:1411,
225:1086,
226:934,
227:936,
228:1020,
229:1021,
230:1022,
231:937,
232:938,
233:955,
234:1037,
235:1038,
236:1023,
237:1410,
238:1024,
239:1025,
240:1039,
241:1409,
242:1040,
243:1041,
244:1042,
245:1026,
246:1027,
247:1044,
248:1046,
249:1043,
250:1030,
251:1078,
252:1031,
253:1077,
254:1076,
255:1033,
256:1034,
257:1035,
258:1036,
259:1075,
260:1074,
261:1073,
262:1408,
263:1072,
264:1071,
265:1070,
266:1047,
267:1048,
268:1069,
269:1068,
270:1067,
271:1066,
272:1049,
273:1050,
274:1065,
275:1407,
276:1406,
277:1051,
278:1052,
279:1064,
280:1053,
281:1054,
282:1055,
283:1063,
284:1405,
285:1404,
286:1403,
287:1056,
288:1060,
289:1402,
290:1057,
291:1058,
292:1105,
293:1059,
294:1106,
295:1080,
296:1107,
297:1108,
298:1109,
299:1110,
300:1401,
301:1082,
302:1135,
303:1134,
304:1400,
305:1133,
306:1087,
307:1132,
308:1088,
309:1089,
310:1090,
311:1091,
312:1131,
313:1130,
314:1129,
315:1128,
316:1127,
317:1092,
318:1126,
319:1125,
320:1093,
321:1124,
322:1094,
323:1123,
324:1122,
325:1095,
326:1096,
327:1121,
328:1120,
329:1097,
330:1119,
331:1118,
332:1117,
333:1116,
334:1115,
335:1114,
336:1098,
337:1099,
338:1399,
339:1398,
340:1112,
341:1111,
342:1100,
343:1101,
344:1226,
345:1397,
346:1171,
347:1102,
348:1396,
349:1225,
350:1136,
351:1395,
352:1170,
353:1169,
354:1394,
355:1137,
356:1168,
357:1393,
358:1138,
359:1167,
360:1392,
361:1391,
362:1166,
363:1165,
364:1139,
365:1140,
366:1164,
367:1390,
368:1141,
369:1163,
370:1162,
371:1389,
372:1142,
373:1388,
374:1173,
375:1143,
376:1160,
377:1144,
378:1159,
379:1145,
380:1158,
381:1157,
382:1146,
383:1147,
384:1148,
385:1172,
386:1149,
387:1156,
388:1150,
389:1161,
390:1224,
391:1155,
392:1151,
393:1222,
394:1221,
395:1152,
396:1220,
397:1219,
398:1153,
399:1218,
400:1217,
401:1174,
402:1216,
403:1175,
404:1176,
405:1177,
406:1178,
407:1215,
408:1179,
409:1214,
410:1180,
411:1213,
412:1212,
413:1211,
414:1181,
415:1210,
416:1209,
417:1186,
418:1208,
419:1387,
420:1187,
421:1207,
422:1386,
423:1206,
424:1385,
425:1205,
426:1204,
427:1384,
428:1383,
429:1188,
430:1203,
431:1189,
432:1190,
433:1202,
434:1191,
435:1192,
436:1201,
437:1193,
438:1200,
439:1223,
440:1199,
441:1257,
442:1382,
443:1318,
444:1194,
445:1195,
446:1196,
447:1197,
448:1198,
449:1320,
450:1292,
451:1381,
452:1252,
453:1339,
454:1253,
455:1321,
456:1322,
457:1254,
458:1255,
459:1323,
460:1256,
461:1324,
462:1453,
463:1325,
464:1326,
465:1327,
466:1380,
467:1276,
468:1328,
469:1329,
470:1330,
471:1275,
472:1355,
473:1274,
474:1258,
475:1357,
476:1291,
477:1259,
478:1290,
479:1260,
480:1261,
481:1271,
482:1272,
483:1277,
484:1262,
485:1263,
486:1452,
487:1264,
488:1273,
489:1265,
490:1297,
491:1289,
492:1266,
493:1288,
494:1267,
495:1268,
496:1285,
497:1269,
498:1270,
499:1331,
500:1366,
501:1287,
502:1286,
503:1278,
504:1279,
505:1379,
506:1280,
507:1281,
508:1282,
509:1283,
510:1332,
511:1295,
512:1284,
513:1296,
514:1294,
515:1307,
516:1293,
517:1308,
518:1309,
519:1310,
520:1356,
521:1311,
522:1370,
523:1298,
524:1312,
525:1299,
526:1378,
527:1454,
528:1313,
529:1333,
530:1334,
531:1300,
532:1335,
533:1301,
534:1336,
535:1352,
536:1302,
537:1303,
538:1304,
539:1305,
540:1306,
541:1351,
542:1350,
543:1349,
544:1348,
545:1314,
546:1354,
547:1315,
548:1316,
549:1317,
550:1319,
551:1359,
552:1358,
553:1337,
554:1340,
555:1341,
556:1368,
557:1342,
558:1343,
559:1344,
560:1345,
561:1367,
562:1346,
563:1347,
564:1442,
565:1360,
566:1446,
567:1361,
568:1362,
569:1363,
570:1364,
571:1369,
572:1371,
573:1372,
574:1374,
575:1375,
576:1376,
577:1377,
578:1433,
579:1434,
580:1435,
581:1436,
582:1437,
583:1438,
584:1439,
585:1440,
586:1441,
587:1443,
588:1451,
589:1450,
590:1444,
591:1449,
592:1445,
593:1448,
594:1447,
595:1457,
596:1458,
597:1455,
598:1459,
599:1460,
600:1461,
601:1462,
602:1456,
603:1463,
604:1464,
605:1465,
606:1466,
607:1467,
608:1468,
609:1469,
610:1470,
611:1471,
612:1472,
613:1473,
614:2705,
615:2689,
616:2694,
617:2695,
618:2696,
619:2697,
620:2704,
621:2708,
622:2711,
623:2712,
624:2713,
625:2714,
626:2719,
627:2723,
628:2728,
629:2740,
630:2743,
631:2744,
632:2745,
633:2752,
634:2754,
635:2755,
636:2762,
637:2763,
638:2764,
639:2765,
640:2772,
641:2773,
642:2776,
643:2778,
644:2788,
645:2789,
646:2790,
647:2793,
648:2800,
649:2801,
650:2803,
651:2804,
652:2806,
653:2808,
654:2810,
655:2809,
656:2811,
657:2812,
658:2815,
659:2817,
660:2818,
661:2819,
662:2821,
663:2820,
664:2822,
665:2823,
666:2824,
667:2825,
668:2844,
669:2846,
670:2847,
671:2858,
672:2861,
673:2862,
674:2868,
675:2870,
676:2871,
677:2872,
678:2873,
679:2874,
680:2877,
681:2878,
682:2886,
683:2887,
684:2888,
685:2889,
686:2892,
687:2893,
688:2895,
689:2903,
690:2904,
691:2905,
692:2906,
693:2907,
694:2909,
695:2912,
696:2913,
697:2915,
698:2916,
699:2919,
700:2920,
701:2922,
702:2923,
703:2924,
704:2925,
705:2926,
706:2935,
707:2936,
708:2937,
709:2938,
710:2939,
711:2945,
712:2949,
713:2952,
714:2956,
715:3006,
716:3014,
717:3015,
718:3016,
719:3017,
720:3019,
721:3022,
722:3026,
723:3029,
724:3030,
725:3033,
726:3037,
727:3039,
728:3046,
729:3047,
730:3055,
731:3056,
732:3058,
733:3059,
734:3061,
735:3062,
736:3065,
737:3072,
738:3073,
739:3074,
740:3075,
741:3078,
742:3080,
743:3082,
744:3097,
745:3099,
746:3106,
747:3109,
748:3111,
749:3113,
750:3114,
751:3115,
752:3116,
753:3123,
754:3126,
755:3127,
756:3128,
757:3129,
758:3130,
759:3131,
760:3132,
761:3137,
762:3140,
763:3150,
764:3156,
765:3168,
766:3169,
767:3170,
768:3171,
769:3187,
770:3191,
771:3194,
772:3200,
773:3207,
774:3218,
775:3229,
776:3234,
777:3238,
778:3241,
779:3246,
780:3248,
781:3249,
782:3250,
783:3251,
784:3254,
785:3257,
786:3262,
787:3263,
788:3276,
789:3282,
790:3283,
791:3286,
792:3288,
793:3291,
794:3297,
795:3298,
796:3299,
797:3302,
798:3307,
799:3312,
800:3314,
801:3315,
802:3319,
803:3320,
804:3321,
805:3328,
806:3329,
EOT;

  $map_string = variable_get('odug_r_numbers', $map_string);

  $rows = explode(',', $map_string);
  $map = array();

  foreach ($rows as $row) {
    $mapping = explode(':', $row);
    $map[$mapping[1]] = $mapping[0];
  }

  foreach ($variables['themed_rows'] as &$row) {
    $nid = str_replace('"', '', $row['nid']);
    $row['counter'] = $map[$nid] ? '"' . $map[$nid] . '"' : '"N/A"';
  }

}
