<?php
/**
 * @file
 * Code for the DGU Data set request feature.
 */


define('DATA_REQUEST_MODERATION_PERMISSION', 'edit any dataset_request content');
define('PUBLIC_DATA_REQUEST_GRANT', 2147483647);    // maximum possible value (avialable in Solr) to avoid conflict with $node->uid
define('DATA_REQUEST_MODERATOR_GRANT', 2147483646); // maximum possible value (avialable in Solr) -1 to avoid conflict with $node->uid
define('DATA_REQUEST_CKAN_ADMIN_GRANT', 2147483645); // maximum possible value (avialable in Solr) -2 to avoid conflict with $node->uid

include_once 'dgu_data_set_request.features.inc';

/*
 * Implements hook_ctools_plugin_directory().
 */
function dgu_data_set_request_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_libraries_info_file_paths().
 */
function dgu_data_set_request_libraries_info_file_paths() {
  $d3_libraries = drupal_get_path('module', 'dgu_data_set_request') . '/libraries/';
  foreach (dgu_data_set_request_d3_libraries() as $library) {
    $paths[] = $d3_libraries . $library;
  }
  return $paths;
}

/**
 * Implements hook_libraries_info_alter().
 */
function dgu_data_set_request_libraries_info_alter(&$libraries) {
  $path = drupal_get_path('module', 'dgu_data_set_request') . '/libraries/';
  foreach (dgu_data_set_request_d3_libraries() as $library) {
    // Change library path to path/to/module/d3/libraries
    $libraries[$library]['library path'] = $path . $library;
  }
}

/**
 * Helper callback to return all d3 libraries located inside this module.
 */
function dgu_data_set_request_d3_libraries() {
  $module_path = drupal_get_path('module', 'dgu_data_set_request');
  $d3_libraries = str_replace($module_path . '/libraries/', '', glob($module_path . '/libraries/*' , GLOB_ONLYDIR));
  return $d3_libraries;
}

/**
 * Implements hook_dgu_moderation_moderator_permission().
 */
function dgu_data_set_request_dgu_moderation_moderator_permission(&$node) {
  if ($node->type == 'dataset_request') {
    if (user_access(DATA_REQUEST_MODERATION_PERMISSION) || is_or_was_assignee($node->nid)) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function dgu_data_set_request_menu_breadcrumb_alter(&$active_trail, $item) {
  switch ($item['path']) {
    case 'data-request':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('Latest data requests');
      break;
    case 'data-request/blogs':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('ODUG Blogs');
      break;
    case 'data-request/minutes':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('ODUG Minutes');
      break;
  }
  if (isset($item['map'][1]->type) && $item['map'][1]->type == 'dataset_request') {
    $active_trail[2] = $active_trail[1];
    $active_trail[1] = array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array());

    if (isset($item['map'][2]) && $item['map'][2] == 'edit') {
      unset($active_trail[2]);
    }

  }
}


/**
 * Implements Hook hook_form_FORM_ID_alter which:
 */
function dgu_data_set_request_form_dataset_request_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  drupal_set_title('Create a dataset request');
  unset($form['actions']['preview']);
  $form['#attributes']['class'][] = "boxed";

  if (user_access(DATA_REQUEST_MODERATION_PERMISSION) || (isset($node->nid) && is_or_was_assignee($node->nid))) {
    $form['#after_build'][] = 'dgu_moderation_node_forms_after_build';
    $form['#after_build'][] = 'dgu_data_set_request_existing_title_disable_maxlength';

    $form['submit_top'] = $form['actions']['submit'];
    $form['submit_top']['#weight'] = -100;
    $form['#attached']['css'][] = array(
      'data' => '#edit-submit-top {float: right;}',
      'type' => 'inline',
    );
    $assignee_uids = dgu_data_set_request_get_assignees($node->nid);
    $assignees = array();
    foreach($assignee_uids as $uid) {
      $user = user_load($uid);
      if (empty($form['field_assignee'][LANGUAGE_NONE]['#default_value'][0]) || isset($form['field_assignee'][LANGUAGE_NONE]['#default_value'][0]) && $form['field_assignee'][LANGUAGE_NONE]['#default_value'][0] != $user->uid) {
        $assignees[] = $user->name;
      }
    }
    if(!empty($assignees)) {
      $assignees = '<div class="help-block">Previous RM\'s: ' . implode(', ', $assignees) . '</div>';
      $form['field_assignee']['#suffix'] = $assignees;
    }
  }

  else {
    dgu_moderation_node_forms_alter($form);
  }

  $form['#validate'][] = 'dgu_data_set_request_form_validate';
  $form['#submit'][] = 'dgu_data_set_request_form_submit';
}

function dgu_data_set_request_existing_title_disable_maxlength($form, &$form_state) {
  global $user;
  if (in_array('data request administrator', $user->roles) || in_array('editor', $user->roles)) {
    unset($form['title']['#maxlength']);
    $form['title']['#maxlength_js'] = FALSE;
  }
  return $form;
}

function dgu_data_set_request_form_validate($form, &$form_state) {
  if (isset($form_state['values']['field_review_outcome'][LANGUAGE_NONE][0]['value']) && ($form_state['values']['field_review_outcome'][LANGUAGE_NONE][0]['value'] == '0' || $form_state['values']['field_review_outcome'][LANGUAGE_NONE][0]['value'] == 2)) {
    if(empty($form_state['values']['field_data_set_link'][LANGUAGE_NONE][0]['url'])) {
      form_set_error('field_organisation_type', 'Dataset link field is required.');
    }
  }
}

function dgu_data_set_request_form_submit($form, &$form_state) {
  if (isset($form_state['values']['field_review_status'][LANGUAGE_NONE][0]['value']) && ($form_state['values']['field_review_status'][LANGUAGE_NONE][0]['value'] != '6')) {
    // Empty outcome field if a request is re-opened.
    $form_state['node']->field_review_outcome = array();
  }
}

function dgu_data_set_request_get_assignees($nid) {
  $assignees = &drupal_static(__FUNCTION__);
  if (empty($assignees)) {
    $query = db_select('field_revision_field_assignee', 'fpa')
      ->distinct()
      ->fields('fpa', array('field_assignee_uid'))
      ->condition('entity_type', 'node')
      ->condition('entity_id', $nid);
    $assignees = $query->execute()->fetchCol();
  }
  return $assignees;
}

function dgu_data_set_request_node_access($node, $op, $account) {
  if ($op != 'create' && $node->type == 'dataset_request') {
    if(!($node->uid == $account->uid || user_access(DATA_REQUEST_MODERATION_PERMISSION))) {
      if(isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
        if(isset($node->field_publisher_ref[LANGUAGE_NONE][0]['id']) && isset($account->data['ckan_publishers'][$node->field_publisher_ref[LANGUAGE_NONE][0]['id']]) && $account->data['ckan_publishers'][$node->field_publisher_ref[LANGUAGE_NONE][0]['id']] == 'admin') {
          return NODE_ACCESS_ALLOW;
        }
        $assignees = dgu_data_set_request_publisher_assignee_get_assignees($node->nid);
        if(!in_array($account->uid, $assignees)) {
          return NODE_ACCESS_DENY;
        }

      }
    }
  }
}

function dgu_data_set_request_node_access_records($node) {
  if ($node->type == 'dataset_request') {

    $assignees = dgu_data_set_request_publisher_assignee_get_assignees($node->nid);

    $grants = array();
    if (isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
      // Private request
      $grants[] = array(
        'realm' => 'private_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 1,
      );
      $grants[] = array(
        'realm' => 'private_data_request',
        'gid' => DATA_REQUEST_CKAN_ADMIN_GRANT,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1,
      );
      if ($node->uid) {
        // Grant author permission only if author is not anonymous.
        $grants[] = array(
          'realm' => 'private_data_request',
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 1,
        );
      }
      if (!empty($assignees)) {
        // Grant permission to all users which are or were assignees in this request.
        foreach($assignees as $assignee_uid) {
          $grants[] = array(
            'realm' => 'private_data_request',
            'gid' => $assignee_uid,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 1,
          );
        }
      }
    }
    else {
      // Public request
      $grants[] = array(
        'realm' => 'public_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 1,
      );
      if ($node->uid) {
        // Grant author permission only if author is not anonymous.
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 1,
        );
      }
      if (!empty($assignees)) {
        // Grant permission to all users which are or were assignees in this request.
        foreach($assignees as $assignee_uid) {
          $grants[] = array(
            'realm' => 'public_data_request',
            'gid' => $assignee_uid,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 1,
          );
        }
      }
      if ($node->status == 1) {
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => PUBLIC_DATA_REQUEST_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 1,
        );
      }
    }
    return $grants;
  }
}

function dgu_data_set_request_node_grants($account, $op) {
  $grants = array();
  $grants['private_data_request'] = array($account->uid);
  $grants['public_data_request'] = array($account->uid, PUBLIC_DATA_REQUEST_GRANT);
  if (user_access(DATA_REQUEST_MODERATION_PERMISSION, $account)) {
    $grants['private_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
    $grants['public_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
  }
  if (!empty($account->data['ckan_publishers']) && in_array('admin', $account->data['ckan_publishers'])) {
    $grants['private_data_request'][] = DATA_REQUEST_CKAN_ADMIN_GRANT;
  }
  return $grants;
}


/**
 * Implements hook_assignee_get_users().
 */
function dgu_data_set_request_assignee_get_users($field = NULL, $instance = NULL, $entity_type = NULL, $entity) {

  $query = db_select('role', 'r');
  $query->join('users_roles', 'ur', 'r.rid = ur.rid');
  $query->join('users', 'u', 'u.uid = ur.uid');
  $query->fields('ur', array('uid'))
        ->fields('u', array('name'))
        ->condition('r.name', 'data request administrator');
  $users = $query->execute()->fetchAll();

  $options = array();
  foreach ($users as $user) {
    $options[$user->uid] = $user->name;
  }

  return $options;
}

/**
 * Implements hook_node_presave().
 */
function dgu_data_set_request_node_presave($node) {
  if ($node->type == 'dataset_request') {
    $previous_data_request_revision = &drupal_static('previous_data_request_revision');

    // Workbench moderation uses shutdown function to update the node for the second time in the same request.
    // To avoid messages being created twice we ignore second node update in single request.
    if (isset($previous_data_request_revision)) {
      $updates_to_ignore = &drupal_static('node_updates_to_ignore');
      $updates_to_ignore = isset($updates_to_ignore) ? $updates_to_ignore : array();
      $updates_to_ignore[] = $node->nid;
    }

    // Store previous revision of the node in static cache to be available for comparison in hook_node_update().
    $previous_data_request_revision = node_load($node->nid);
  }
}

/**
 * Implements hook_entity_insert().
 */
function dgu_data_set_request_entity_insert($entity, $type) {
  if($type == 'reply' && $entity->bundle == 'review_comment' && module_exists('message_subscribe')) {
    // This is taken from message stack examples.
    // It's related to message_notify how it stores rendered subject and body via view modes.
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );
    $data_request_admin_roles = variable_get('dgu_data_set_request_data_request_admin_roles',array(3, 6, 10)); // 3 = administrator, 6 = data publisher, 10 = data request administrator

    // Get data_request_update message bundle and set required fields.
    $message = message_create('data_request_review_comment_new');
    $wrapper = entity_metadata_wrapper('message', $message);
    $data_request_node = node_load($entity->entity_id);
    $wrapper->field_data_request_reference->set($data_request_node);
    $wrapper->field_reply_reference->set($entity);

    $uids = _dgu_data_set_request_get_subscribers($data_request_node->nid, $data_request_admin_roles, FALSE);
    message_subscribe_send_message('node', $data_request_node, $message, $options, array('uids' => $uids));

  }
}

/**
 * Implements hook_node_update().
 */
function dgu_data_set_request_node_update($node) {
  if ($node->type == 'dataset_request' && module_exists('message_subscribe')) {

    // Ignore second node update in single request.
    // See dgu_data_set_request_node_presave();
    $updates_to_ignore = &drupal_static('node_updates_to_ignore');
    if (is_array($updates_to_ignore) && in_array($node->nid, $updates_to_ignore)) {
      return;
    }

    // Don't create a message about moderation here, there should be
    // an universal message about moderation state change for all content types.
    if (empty($node->workbench_moderation_state_current) && $node->workbench_moderation['current']->from_state == 'needs_review' && $node->workbench_moderation['current']->state == 'published'
      || $node->workbench_moderation['current']->from_state == 'needs_review' && $node->workbench_moderation['current']->state == 'draft') {
      return;
    }

    $previous_data_request_revision = &drupal_static('previous_data_request_revision');
    $previous_rm = isset($previous_data_request_revision->field_assignee[LANGUAGE_NONE][0]['uid']) ? $previous_data_request_revision->field_assignee[LANGUAGE_NONE][0]['uid'] : NULL;
    $previous_publisher_assignee = isset($previous_data_request_revision->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) ? $previous_data_request_revision->field_publisher_assignee[LANGUAGE_NONE][0]['uid'] : NULL;

    $fields_for_short_summary = array('field_review_status' => 'value', 'field_review_outcome' =>'value', 'field_review_notes' => 'value');
    $data_request_admin_roles = variable_get('dgu_data_set_request_data_request_admin_roles',array(3, 6, 10, 12)); // 3 = administrator, 6 = data publisher, 10 = data request administrator, 12 = editor

    // This is taken from message stack examples.
    // It's related to message_notify how it stores rendered subject and body via view modes.
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );

    // Use static cache to get this summary available in hook_tokens().
    $summary_of_changes = &drupal_static('data_request_summary_of_changes');

    if (isset($node->field_assignee[LANGUAGE_NONE][0]['uid']) && $previous_rm != $node->field_assignee[LANGUAGE_NONE][0]['uid']
     || isset($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) && $previous_publisher_assignee != $node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) {

      // There is a new publisher assignee or new RM, this is special case where an assignee
      // must receive different message than all other subscribers.
      if (isset($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) && $previous_publisher_assignee != $node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) {
        $assignee = user_load($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']);
      }
      else {
        $assignee = user_load($node->field_assignee[LANGUAGE_NONE][0]['uid']);
      }

      // Get data_request_assignee message bundle and set required fields.
      $message_assignee = message_create('data_request_assignee');
      $wrapper = entity_metadata_wrapper('message', $message_assignee);
      $wrapper->field_data_request_reference->set($node);
      $wrapper->field_data_request_assignee->set($assignee);

      $default_notifier = variable_get('message_subscribe_default_notifiers', array('email' => 'email'));
      $notifier = isset($assignee->field_digest_notifier[LANGUAGE_NONE][0]['value']) ? array($assignee->field_digest_notifier[LANGUAGE_NONE][0]['value'] => $assignee->field_digest_notifier[LANGUAGE_NONE][0]['value']) : $default_notifier;
      $subscribe_options = array(
        'uids' => array(
          $assignee->uid => array(
            'notifiers' => $notifier,
          ),
        ),
      );

      message_subscribe_send_message('node', $node, $message_assignee, $options, $subscribe_options);

      // Temporarily unsubscribe current assignee to avoid sending two messages
      // to this person (one about being current assignee, second about request update event)
      // if this person was subscribed before (e.g. was already an assignee before).
      flag('unflag', 'subscribe_node', $node->nid, $assignee);

      // Send data_request_update message to all subscribers.
      // First test if particular fields has changed and notify all non admin users.
      if(_dgu_data_set_request_fields_changed($fields_for_short_summary, $node, $previous_data_request_revision)) {

        // Get data_request_update message bundle and set required fields.
        $message_update = message_create('data_request_update');
        $wrapper = entity_metadata_wrapper('message', $message_update);
        $wrapper->field_data_request_reference->set($node);

        $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision, $fields_for_short_summary);
        $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles, FALSE);
        if (!empty($uids)) {
          message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $uids));
        }

      }
      // Then notify admin users with full summary of changes.
      // Get data_request_update message bundle and set required fields.
      $message_update = message_create('data_request_update');
      $wrapper = entity_metadata_wrapper('message', $message_update);
      $wrapper->field_data_request_reference->set($node);

      $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision);
      $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles);

      if (!empty($uids)) {
        message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $uids));
      }

      // Subscribe an assignee to following notifications about data request updates.
      flag('flag', 'subscribe_node', $node->nid, $assignee);
    }
    else {
      // Something else than assignee has been changed, simply notify all subscribers.

      // First notify admin users with full summary of changes.

      // Get data_request_update message bundle and set required fields.
      $message_update = message_create('data_request_update');
      $wrapper = entity_metadata_wrapper('message', $message_update);
      $wrapper->field_data_request_reference->set($node);

      $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision);
      $admin_uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles);
      if (!empty($admin_uids)) {
        message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $admin_uids));
      }

      // Then test if public fields has changed and notify all non admin users.
      if(_dgu_data_set_request_fields_changed($fields_for_short_summary, $node, $previous_data_request_revision)) {
        // Get data_request_update message bundle and set required fields.
        $message_update = message_create('data_request_update');
        $wrapper = entity_metadata_wrapper('message', $message_update);
        $wrapper->field_data_request_reference->set($node);

        $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision, $fields_for_short_summary);
        $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles, FALSE);
        $non_admin_uids = array_diff($uids, $admin_uids);
        if (!empty($non_admin_uids)) {
          message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $non_admin_uids));
        }
      }
    }
  }
}


/**
 * Helper function to get all users subscribed to a data request.
 */
function _dgu_data_set_request_get_subscribers($nid, $rids, $in_rids = TRUE) {
  // Get all flags on given entity type.
  $flags = message_subscribe_flag_get_flags('node');
  $default_notifier = variable_get('message_subscribe_default_notifiers', array('email' => 'email'));
  $fids = array();
  foreach ($flags as $flag) {
    $fids[$flag->fid] = $flag->name;
  }
  // Query all the entity IDs inside the given flags. We don't use
  // flag_get_content_flags() as we want to get all the flaggings of an
  // entity-type in a single query.
  $query = db_select('flagging', 'f');
  $query->join('users', 'u', 'u.uid = f.uid');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('field_data_field_digest_notifier', 'fdn', 'fdn.entity_id = u.uid');
  $query->fields('f', array('uid'));
  $query->fields('fdn', array('field_digest_notifier_value'))
    ->distinct()
    ->condition('f.entity_type', 'node')
    ->condition('f.entity_id', $nid)
    ->condition('fid', array_keys($fids), 'IN');
  if ($in_rids == TRUE) {
    $query->condition('ur.rid', $rids, 'IN');
  }
  else {
    $query->condition(db_or()->where('ur.rid NOT IN (' . implode (', ', $rids) . ')')->isNull('ur.rid'));
  }
  $result = $query->execute()->fetchAll();
  $uids = array();
  foreach ($result as $row) {
    $uids[$row->uid]['notifiers'] = isset($row->field_digest_notifier_value) ? array($row->field_digest_notifier_value => $row->field_digest_notifier_value) : $default_notifier;
  }
  return $uids;
}

/**
 * Helper function to test if particular fields has changed between revisions.
 */
function _dgu_data_set_request_fields_changed($fields_for_short_summary, $current_revision, $previous_revision) {
  foreach ($fields_for_short_summary as $field_name => $key) {
    $field_current_revision = isset($current_revision->{$field_name}[LANGUAGE_NONE][0][$key]) ? $current_revision->{$field_name}[LANGUAGE_NONE][0][$key] : NULL;
    $field_previous_revision = isset($previous_revision->{$field_name}[LANGUAGE_NONE][0][$key]) ? $previous_revision->{$field_name}[LANGUAGE_NONE][0][$key] : NULL;
    if ($field_current_revision !== $field_previous_revision) {
      return TRUE;
    }
  }
}

/**
 * Helper function to get summary of changes used in notification about data request update.
 */
function _dgu_data_request_get_summary_of_changes($current_revision, $previous_revision, $fields = array()) {

  //TODO use $fields to render particular summary

  $changes = array();
  $current_request = node_view($current_revision);
  $previous_request = node_view($previous_revision);

  foreach ((array)$current_request['#node'] as $key => $value) {
    // Iterate through all fields.
    if(strpos($key, 'field_') === 0) {
      if(!empty($fields)) {
        if(!in_array($key, array_keys($fields))) {
          continue;
        }
      }

      if ((isset($current_request[$key]['#items']) && !isset($previous_request[$key]['#items']))
       || (!isset($current_request[$key]['#items']) && isset($previous_request[$key]['#items']))
       || (isset($current_request[$key]['#items']) && isset($previous_request[$key]['#items']) && count($current_request[$key]['#items']) != count($previous_request[$key]['#items']))) {
        // If multi value field had different quantity of items it is modified.
        _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, $changes);
      }
      else {
        // Otherwise compare the values.
        $current_node = clone $current_request['#node'];
        $previous_node = clone $previous_request['#node'];

        if (isset($current_node->{$key}[LANGUAGE_NONE])) {
          foreach ($current_node->{$key}[LANGUAGE_NONE] as $index => &$item) {

            // Fix weird discrepancy on text_log fields, for some reason current revision has
            // only 'value' element, previous revision has also 'safe_value' and 'format'.
            $item['format'] = FALSE;
            $item['safe_value'] = FALSE;
            $previous_node->{$key}[LANGUAGE_NONE][$index]['format'] = FALSE;
            $previous_node->{$key}[LANGUAGE_NONE][$index]['safe_value'] = FALSE;

            if ($item != $previous_node->{$key}[LANGUAGE_NONE][$index]) {
              _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, $changes);
            }
          }
        }
      }
    }

  }

  if (!empty($changes)) {
    // Render summary.
    $output = "Summary of changes:\n";
    foreach ($changes as $field_name => $diff) {
      $output .= 'Field "' . $field_name . '" changed' . "\n";
      $output .= 'from: ' . $diff['previous'] . "\n";
      $output .= 'to:   ' . $diff['current'] . "\n";
      $output .= "\n";
    }
    return $output;
  }
}

/**
 * Helper function to render changes in a single field.
 */
function _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, &$changes) {
  $new_value = field_view_field('node', $current_revision, $key);
  $old_value = field_view_field('node', $previous_revision, $key);

  $new_value['#label_display'] = 'hidden';
  $old_value['#label_display'] = 'hidden';

  $title = $new_value['#title'] ? $new_value['#title'] : $old_value['#title'];

  $changes[$title] = array (
    'current' => substr(_dgu_data_set_request_remove_multiple_commas(strip_tags(str_replace('</', ', </', render($new_value)))), 0, -2),
    'previous' => substr(_dgu_data_set_request_remove_multiple_commas(strip_tags(str_replace('</', ', </', render($old_value)))), 0, -2),
  );
}

/**
 * Helper recursive function to get rid of multiple commas added before
 * each closing HTML tag in _dgu_data_set_request_render_changes() function.
 */
function _dgu_data_set_request_remove_multiple_commas($string) {
  $string = str_replace(', , ', ', ', $string);
  if (strpos($string, ', , ') !== FALSE) {
    $string = _dgu_data_set_request_remove_multiple_commas($string);
  }
  return $string;
}


/**
* Implements hook_token_info().
*/
function dgu_data_set_request_token_info() {
  $info['tokens']['message']['data_request-summary_of_changes'] = array(
    'name' => t('Data request - summary of changes'),
    'description' => t('Returns summary of changes in modified data request'),
  );
  return $info;
}
/**
* Implements hook_tokens().
*/
function dgu_data_set_request_tokens($type, $tokens, array $data = array(), array $options = array()) {
 $replacements = array();
   if ($type == 'message') {
     foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'data_request-summary_of_changes':
          $replacements[$original] = drupal_static('data_request_summary_of_changes');
          break;
      }
     }
  }
  return $replacements;
}

/**
 * Implements hook_preprocess_replies().
 */
function  dgu_data_set_request_preprocess_replies(&$variables) {
  if ($variables['bundle'] == 'review_comment' && $variables['entity_type'] == 'node') {
    if(!node_access('update', $variables['entity'])) {
      global $user;
      $assignees = dgu_data_set_request_publisher_assignee_get_assignees($variables['entity_id']);
      // Check if current user is or wes publisher assignee or if is an admin for referenced publisher or parent publisher.
      if(!in_array($user->uid, $assignees) && !(isset($variables['entity']->field_publisher_ref[LANGUAGE_NONE][0]['id']) && in_array($variables['entity']->field_publisher_ref[LANGUAGE_NONE][0]['id'], dgu_user_get_admin_publishers()))) {
        // Hide reply forms for users which haven't got access to edit entity.
        // We need to give them full access to create/update review_comment replies
        // but only on nodes they have permissions to edit, e.g data request assignee grant.
        unset($variables['replies']);
        unset($variables['reply_form']);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function dgu_data_set_request_form_reply_add_form_alter(&$form, &$form_state, $form_id) {
  if($form['#bundle'] == 'review_comment') {
    $form['field_review_comment'][LANGUAGE_NONE][0]['#title'] = 'Add review note <span class="submitted">(for non-public view)</span>';
    $form['submit']['#value'] = 'Submit review note';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function dgu_data_set_request_preprocess_page(&$variables) {
  if (arg(0) == 'user' || arg(0) == 'admin') {
    if($count = _dgu_data_set_request_active_requests_publisher_admin_count()) {
      $link_title = 'view ' . format_plural($count, 'it', 'these') . ' now';
      drupal_set_message(
        'There ' . format_plural($count, 'is ', 'are ') . $count . ' active data ' . format_plural($count, 'request', 'requests')
        . ' for publishers that you administer, <a class="publishers-active-requests-link" href="/admin/workbench/content/data-requests?field_review_status_value%5B%5D=1&field_review_status_value%5B%5D=2&field_review_status_value%5B%5D=3&field_review_status_value%5B%5D=4&field_review_status_value%5B%5D=5&title=&field_publication_preference_value=All&field_barriers_reason_value=All&field_assignee_uid=All&field_publisher_ref_id=All&field_publisher_assignee_uid=All&items_per_page=25">'
        . $link_title . '</a>.<br />See <a href="/help?tour=data_requests_practitioners_guide">Data requests practitioners guide</a>.'
      );
    }
    if($count = _dgu_data_set_request_active_requests_publisher_assignee_count()) {
      $link_title = 'view ' . format_plural($count, 'it', 'these') . ' now';
      drupal_set_message(
        'You have ' . $count . ' active data ' . format_plural($count, 'request', 'requests')
        . ' that need' . format_plural($count, 's', '')
        . ' review, <a class="active-requests-link" href="/admin/workbench/content/active">'
        . $link_title . '</a>.<br />See <a href="/help?tour=data_requests_user_guide">Data requests user guide</a>.'
      );
    }
  }
}

function _dgu_data_set_request_active_requests_publisher_assignee_count() {
  global $user;
  if (in_array('data publisher', $user->roles)) {
    $query = db_select('field_data_field_publisher_assignee', 'a');
    $query->fields('a');
    $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
    $query->condition('a.field_publisher_assignee_uid', $user->uid)
      ->condition('s.field_review_status_value', 0, '<>')
      ->condition('s.field_review_status_value', 6, '<>');
    $result = $query->execute();
    return $result->rowCount();
  }
}

function _dgu_data_set_request_active_requests_publisher_admin_count() {
  global $user;
  if (in_array('data publisher', $user->roles) && !empty($user->data['ckan_publishers']) && in_array('admin', $user->data['ckan_publishers'])) {

    $publishers = array();
    foreach ($user->data['ckan_publishers'] as $publisher_id => $capacity) {

      if($capacity == 'admin' && !in_array($publisher_id, $publishers)) {
        $publishers = array_merge($publishers, dgu_user_get_publisher_with_children($publisher_id));
      }
    }

    $query = db_select('field_data_field_publisher_ref', 'p');
    $query->join('node', 'n', 'n.nid = p.entity_id');
    $query->fields('p');
    $query->join('field_data_field_review_status', 's','p.entity_id = s.entity_id');
    $query->condition('s.field_review_status_value', 0, '<>')
      ->condition('s.field_review_status_value', 6, '<>')
      ->condition('p.field_publisher_ref_id', $publishers, 'IN');
    $query->addTag('node_access');
    $result = $query->execute();
    return $result->rowCount();
  }
}


/**
 * Implements hook_bootstrap_tour_alter().
 */
function dgu_data_set_request_bootstrap_tour_alter($tour) {
  global $user;
  foreach($tour->steps as &$step) {
    if (substr($step['path'], 0, 13) == 'tour-redirect') {
      $redirect = substr($step['path'], 14);
      switch ($redirect) {
        case 'active-data-request':
          $query = db_select('field_data_field_publisher_assignee', 'a');
          $query->fields('a', array('entity_id'));
          $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
          $query->join('node', 'n','a.entity_id = n.nid');
          $query->condition('a.field_publisher_assignee_uid', $user->uid)
            ->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->orderBy('n.nid', 'DESC');
          $active_request_nid = $query->execute()->fetchField();
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = drupal_get_path_alias('node/' . $active_request_nid) . '?' . $query;
          break;
        case 'publisher-active-data-request-url':
          $query_parameters = drupal_get_query_parameters();
          $query_parameters['field_review_status_value'] = array('1','2','3','4','5');
          $query_parameters['field_publication_preference_value'] = 'All';
          $query_parameters['field_barriers_reason_value'] = 'All';
          $query_parameters['field_assignee_uid'] = 'All';
          $query_parameters['field_publisher_ref_id'] = 'All';
          $query_parameters['field_publisher_assignee_uid'] = 'All';
          $query_parameters['items_per_page'] = '25';
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = 'admin/workbench/content/data-requests' . '?' . $query;
          break;
        case 'publisher-active-data-request':
          $publishers = array();
          foreach ($user->data['ckan_publishers'] as $publisher_id => $capacity) {
            if($capacity == 'admin' && !in_array($publisher_id, $publishers)) {
              $publishers = array_merge($publishers, dgu_user_get_publisher_with_children($publisher_id));
            }
          }
          $query = db_select('field_data_field_publisher_ref', 'p');
          $query->join('node', 'n', 'n.nid = p.entity_id');
          $query->fields('p', array('entity_id'));
          $query->join('field_data_field_review_status', 's','p.entity_id = s.entity_id');
          $query->join('node', 'n','p.entity_id = n.nid');
          $query->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->condition('p.field_publisher_ref_id', $publishers, 'IN')
            ->orderBy('n.nid', 'DESC');
          $query->addTag('node_access');
          $active_request_nid = $query->execute()->fetchField();
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = drupal_get_path_alias('node/' . $active_request_nid) . '?' . $query;
          break;
        case 'active-data-request-author':
          $query = db_select('field_data_field_publisher_assignee', 'a');
          $query->fields('a', array('entity_id'));
          $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
          $query->condition('a.field_publisher_assignee_uid', $user->uid)
            ->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->orderBy('entity_id', 'DESC');
          $active_request_nid = $query->execute()->fetchField();
          $active_request = node_load($active_request_nid);
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = drupal_get_path_alias('user/' . $active_request->uid) . '?' . $query;
          break;

        case 'active-data-request-author-contact':
          $query = db_select('field_data_field_publisher_assignee', 'a');
          $query->fields('a', array('entity_id'));
          $query->join('field_data_field_review_status', 's','a.entity_id = s.entity_id');
          $query->condition('a.field_publisher_assignee_uid', $user->uid)
            ->condition('s.field_review_status_value', 0, '<>')
            ->condition('s.field_review_status_value', 6, '<>')
            ->orderBy('entity_id', 'DESC');
          $active_request_nid = $query->execute()->fetchField();
          $active_request = node_load($active_request_nid);
          $query_parameters = drupal_get_query_parameters();
          $query = drupal_http_build_query($query_parameters);
          $step['path'] = 'user/' . $active_request->uid . '/contact?' . $query;
          break;
      }
    }
  }
}


/**
 * Implements hook_views_pre_view().
 */
function dgu_data_set_request_views_pre_view(&$view, &$display_id, &$args) {
  global $user;
  // If not moderator or editor then unset 'Data request' view header which tells about 'Needs review' page.
  if ($view->name == 'data_requests_administration' && $display_id == 'page_1') {
    if (!in_array('moderator', $user->roles) && !in_array('editor', $user->roles)) {
      $view->set_item_option($display_id, 'header', 'area', 'content', '');
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function dgu_data_set_request_views_query_alter(&$view, &$query) {
  global $user;
  if ($view->name == 'data_requests_administration' && $view->current_display == 'page_1' && !in_array('data request administrator', $user->roles) && !in_array('editor', $user->roles)) {
    $publishers = array();
    if (!empty($user->data['ckan_publishers']) && in_array('admin', $user->data['ckan_publishers'])) {
      // Limit requests only to publisher (with all sub publishers) in which current user has 'admin' capacity.
      $publishers = dgu_user_get_admin_publishers();
    }
    elseif (in_array('data publisher', $user->roles)) {
      // Limit requests only to publishers (without sub publishers) in which current user has 'editor' capacity.
      $full_account = user_load($user->uid);

      foreach ($full_account->field_publishers[LANGUAGE_NONE] as $publisher_ref) {
        $publishers[] = $publisher_ref['target_id'];
      }
    }
    else {
      return;
    }

    $query->where[1]['conditions'][] = array(
      'field' => 'field_data_field_publisher_ref.field_publisher_ref_id',
      'value' => array($publishers),
      'operator' => 'in'
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dgu_data_set_request_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['view']->name == 'data_requests_administration' && $form_state['view']->current_display == 'page_1') {

    if ($admin_publishers = dgu_user_get_admin_publishers()) {
      // Remove publishers which are filtered out in dgu_user_views_query_alter() from exposed filter.
      foreach ($form['field_publisher_ref_id']['#options'] as $key => $value) {
        if (!in_array($key, $admin_publishers) && $key != 'All') {
          unset($form['field_publisher_ref_id']['#options'][$key]);
        }
      }

      $query = db_select('field_data_field_publisher_assignee', 'pa');
      $query->join('field_data_field_publisher_ref', 'p', 'p.entity_id = pa.entity_id');
      $query->fields('pa', array('field_publisher_assignee_uid'))
        ->condition('p.field_publisher_ref_id', $admin_publishers, 'IN')
        ->distinct();
      $publisher_assignees = $query->execute()->fetchCol();

      // Also remove not relevant publisher assignees.
      foreach ($form['field_publisher_assignee_uid']['#options'] as $key => $value) {
        if (!in_array($key, $publisher_assignees) && $key != 'All') {
          unset($form['field_publisher_assignee_uid']['#options'][$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_process_views_data_export_csv_body().
 */
function dgu_data_set_request_process_views_data_export_csv_body(&$variables) {

  $map_string = <<<EOT
817:R0054,
818:R0084,
819:R0088,
820:R0091,
821:R0096,
822:R0102,
823:R0053,
824:R0006,
825:R0046,
826:R0003,
827:R0076,
828:R0077,
829:R0074,
830:R0010,
831:R0011,
832:R0061,
833:R0069,
834:R0060,
835:R0015,
836:R0016,
837:R0013,
839:R0014,
840:R0107,
841:R0119,
847:R0140,
848:R0141,
849:R0144,
850:R0152,
851:R0154,
852:R0157,
853:R0158,
854:R0162,
855:R0165,
856:R0167,
858:R0169,
859:R0175,
860:R0178,
861:R0185,
862:R0193,
863:R0197,
864:R0199,
865:R0201,
866:R0202,
867:R0204,
868:R0205,
869:R0207,
870:R0047,
871:R0209,
872:R0210,
873:R0213,
874:R0005,
875:R0007,
876:R0023,
877:R0028,
878:R0019,
879:R0018,
880:R0017,
881:R0026,
882:R0027,
883:R0030,
884:R0040,
885:R0042,
886:R0041,
887:R0051,
888:R0216,
890:R0220,
891:R0024,
892:R0034,
893:R0029,
894:R0021,
895:R0044,
896:R0039,
897:R0043,
898:R0035,
899:R0036,
900:R0052,
901:R0049,
902:R0048,
903:R0071,
904:R0064,
905:R0063,
906:R0062,
907:R0057,
908:R0082,
909:R0081,
910:R0075,
911:R0073,
912:R0093,
913:R0094,
914:R0092,
915:R0086,
916:R0105,
917:R0113,
918:R0118,
919:R0120,
920:R0121,
921:R0122,
922:R0126,
923:R0128,
924:R0129,
925:R0130,
926:R0134,
927:R0146,
928:R0138,
929:R0137,
930:R0225,
931:R0226,
932:R0228,
933:R0231,
934:R0234,
935:R0227,
936:R0235,
937:R0239,
938:R0240,
939:R0009,
940:R0001,
941:R0008,
942:R0012,
943:R0033,
944:R0032,
945:R0025,
946:R0038,
947:R0058,
948:R0056,
949:R0055,
950:R0045,
951:R0065,
952:R0066,
953:R0067,
954:R0083,
955:R0241,
956:R0100,
957:R0080,
958:R0090,
959:R0098,
960:R0099,
961:R0101,
962:R0103,
963:R0104,
964:R0109,
965:R0110,
966:R0111,
967:R0112,
968:R0114,
969:R0115,
970:R0116,
971:R0117,
972:R0123,
973:R0125,
974:R0135,
975:R0136,
976:R0139,
977:R0143,
978:R0145,
979:R0147,
980:R0148,
981:R0149,
982:R0151,
983:R0153,
984:R0155,
985:R0156,
986:R0159,
987:R0160,
988:R0161,
989:R0163,
990:R0164,
991:R0166,
992:R0170,
993:R0172,
994:R0173,
995:R0174,
996:R0176,
997:R0177,
998:R0179,
999:R0180,
1000:R0181,
1001:R0182,
1002:R0183,
1003:R0190,
1004:R0194,
1005:R0195,
1006:R0198,
1007:R0200,
1008:R0203,
1009:R0206,
1010:R0211,
1011:R0212,
1012:R0214,
1013:R0215,
1014:R0217,
1015:R0218,
1016:R0221,
1017:R0223,
1018:R0230,
1019:R0229,
1020:R0236,
1021:R0237,
1022:R0238,
1023:R0244,
1024:R0246,
1025:R0247,
1026:R0253,
1027:R0254,
1028:R0192,
1029:R0184,
1030:R0259,
1031:R0261,
1033:R0265,
1034:R0266,
1035:R0267,
1036:R0268,
1037:R0242,
1038:R0243,
1039:R0248,
1040:R0250,
1041:R0251,
1042:R0252,
1043:R0258,
1044:R0255,
1046:R0256,
1047:R0276,
1048:R0277,
1049:R0282,
1050:R0283,
1051:R0287,
1052:R0288,
1053:R0290,
1054:R0291,
1055:R0292,
1056:R0297,
1057:R0300,
1058:R0301,
1059:R0303,
1060:R0298,
1061:R0095,
1062:R0108,
1063:R0293,
1064:R0289,
1065:R0284,
1066:R0281,
1067:R0280,
1068:R0279,
1069:R0278,
1070:R0275,
1071:R0274,
1072:R0273,
1073:R0271,
1074:R0270,
1075:R0269,
1076:R0264,
1077:R0263,
1078:R0260,
1079:R0124,
1080:R0305,
1081:R0142,
1082:R0311,
1083:R0188,
1084:R0189,
1085:R0196,
1086:R0233,
1087:R0316,
1088:R0318,
1089:R0319,
1090:R0320,
1091:R0321,
1092:R0327,
1093:R0330,
1094:R0332,
1095:R0335,
1096:R0336,
1097:R0339,
1098:R0346,
1099:R0348,
1100:R0353,
1101:R0354,
1102:R0358,
1103:R0127,
1104:R0187,
1105:R0302,
1106:R0304,
1107:R0306,
1108:R0307,
1109:R0308,
1110:R0309,
1111:R0352,
1112:R0351,
1114:R0345,
1115:R0344,
1116:R0343,
1117:R0342,
1118:R0341,
1119:R0340,
1120:R0338,
1121:R0337,
1122:R0334,
1123:R0333,
1124:R0331,
1125:R0329,
1126:R0328,
1127:R0326,
1128:R0325,
1129:R0324,
1130:R0323,
1131:R0322,
1132:R0317,
1133:R0315,
1134:R0313,
1135:R0312,
1136:R0361,
1137:R0366,
1138:R0369,
1139:R0375,
1140:R0376,
1141:R0379,
1142:R0383,
1143:R0386,
1144:R0388,
1145:R0390,
1146:R0393,
1147:R0394,
1148:R0395,
1149:R0397,
1150:R0399,
1151:R0651,
1152:R0405,
1153:R0408,
1155:R0402,
1156:R0398,
1157:R0392,
1158:R0391,
1159:R0389,
1160:R0387,
1161:R0400,
1162:R0381,
1163:R0380,
1164:R0377,
1165:R0374,
1166:R0373,
1167:R0370,
1168:R0367,
1169:R0364,
1170:R0363,
1171:R0357,
1172:R0396,
1173:R0385,
1174:R0412,
1175:R0414,
1176:R0415,
1177:R0416,
1178:R0417,
1179:R0419,
1180:R0421,
1181:R0425,
1182:R0031,
1183:R0087,
1184:R0132,
1185:R0131,
1186:R0429,
1187:R0432,
1188:R0441,
1189:R0443,
1190:R0444,
1191:R0446,
1192:R0447,
1193:R0449,
1194:R0456,
1195:R0457,
1196:R0458,
1197:R0459,
1198:R0461,
1199:R0452,
1200:R0450,
1201:R0448,
1202:R0445,
1203:R0442,
1204:R0438,
1205:R0437,
1206:R0435,
1207:R0433,
1208:R0430,
1209:R0428,
1210:R0427,
1211:R0424,
1212:R0423,
1213:R0422,
1214:R0420,
1215:R0418,
1216:R0413,
1217:R0411,
1218:R0409,
1219:R0407,
1220:R0406,
1221:R0404,
1222:R0403,
1223:R0451,
1224:R0401,
1225:R0360,
1226:R0355,
1252:R0466,
1253:R0468,
1254:R0471,
1255:R0472,
1256:R0474,
1257:R0453,
1258:R0486,
1259:R0489,
1260:R0491,
1261:R0492,
1262:R0496,
1263:R0497,
1264:R0499,
1265:R0501,
1266:R0503,
1267:R0505,
1268:R0506,
1269:R0508,
1270:R0509,
1271:R0493,
1272:R0494,
1273:R0500,
1274:R0485,
1275:R0618,
1276:R0481,
1277:R0495,
1278:R0514,
1279:R0515,
1280:R0517,
1281:R0518,
1282:R0519,
1283:R0520,
1284:R0523,
1285:R0507,
1286:R0513,
1287:R0512,
1288:R0504,
1289:R0502,
1290:R0490,
1291:R0488,
1292:R0463,
1293:R0528,
1294:R0525,
1295:R0522,
1296:R0524,
1297:R0526,
1298:R0535,
1299:R0537,
1300:R0543,
1301:R0545,
1302:R0548,
1303:R0549,
1304:R0550,
1305:R0551,
1306:R0552,
1307:R0527,
1308:R0529,
1309:R0530,
1310:R0531,
1311:R0533,
1312:R0536,
1313:R0540,
1314:R0557,
1315:R0559,
1316:R0560,
1317:R0561,
1318:R0455,
1319:R0562,
1320:R0462,
1321:R0469,
1322:R0470,
1323:R0473,
1324:R0475,
1325:R0477,
1326:R0478,
1327:R0479,
1328:R0482,
1329:R0483,
1330:R0484,
1331:R0510,
1332:R0521,
1333:R0541,
1334:R0542,
1335:R0544,
1336:R0546,
1337:R0565,
1338:R0191,
1339:R0467,
1340:R0566,
1341:R0567,
1342:R0569,
1343:R0570,
1344:R0571,
1345:R0572,
1346:R0574,
1347:R0575,
1348:R0556,
1349:R0555,
1350:R0554,
1351:R0553,
1352:R0547,
1353:R0037,
1354:R0558,
1355:R0619,
1356:R0532,
1357:R0487,
1358:R0564,
1359:R0563,
1360:R0578,
1361:R0580,
1362:R0581,
1363:R0582,
1364:R0583,
1366:R0511,
1367:R0573,
1368:R0568,
1369:R0584,
1370:R0534,
1371:R0585,
1372:R0586,
1374:R0587,
1375:R0588,
1376:R0589,
1377:R0590,
1378:R0538,
1379:R0516,
1380:R0480,
1381:R0464,
1382:R0454,
1383:R0440,
1384:R0439,
1385:R0436,
1386:R0434,
1387:R0431,
1388:R0384,
1389:R0382,
1390:R0378,
1391:R0372,
1392:R0371,
1393:R0368,
1394:R0365,
1395:R0362,
1396:R0359,
1397:R0356,
1398:R0350,
1399:R0349,
1400:R0314,
1401:R0310,
1402:R0299,
1403:R0296,
1404:R0295,
1405:R0294,
1406:R0286,
1407:R0285,
1408:R0272,
1409:R0249,
1410:R0245,
1411:R0232,
1412:R0224,
1413:R0222,
1414:R0208,
1415:R0186,
1416:R0171,
1417:R0150,
1418:R0133,
1419:R0097,
1420:R0089,
1421:R0085,
1422:R0079,
1423:R0078,
1424:R0072,
1425:R0070,
1426:R0068,
1427:R0059,
1428:R0050,
1429:R0022,
1430:R0020,
1431:R0004,
1432:R0002,
1433:R0591,
1434:R0592,
1435:R0593,
1436:R0594,
1437:R0595,
1438:R0596,
1439:R0597,
1440:R0598,
1441:R0599,
1442:R0577,
1443:R0600,
1444:R0604,
1445:R0606,
1446:R0579,
1447:R0608,
1448:R0607,
1449:R0605,
1450:R0603,
1451:R0601,
1452:R0498,
1453:R0476,
1454:R0539,
1455:R0611,
1456:R0616,
1457:R0609,
1458:R0610,
1459:R0612,
1460:R0613,
1461:R0614,
1462:R0615,
1463:R0617,
1464:R0623,
1465:R0622,
1466:R0621,
1467:R0620,
1468:R0624,
1469:R0625,
1470:R0626,
1471:R0627,
1472:R0628,
1473:R0629,
2689:R0631,
2694:R0632,
2695:R0633,
2696:R0634,
2697:R0635,
2704:R0636,
2705:R0652,
2708:R0637,
2711:R0653,
2712:R0654,
2713:R0639,
2714:R0638,
2719:R0790,
2723:R0655,
2728:R0656,
2740:R0640,
2743:R0657,
2744:R0658,
2745:R0641,
2752:R0659,
2754:R0642,
2755:R0643,
2762:R0644,
2763:R0645,
2764:R0646,
2765:R0647,
2772:R0648,
2773:R0649,
2776:R0650,
2778:R0660,
2788:R0661,
2789:R0791,
2790:R0792,
2793:R0662,
2800:R0663,
2801:R0793,
2803:R0664,
2804:R0665,
2806:R0666,
2808:R0669,
2809:R0795,
2810:R0794,
2811:R0796,
2812:R0797,
2815:R0667,
2817:R0668,
2818:R0798,
2819:R0799,
2820:R0801,
2821:R0800,
2822:R0802,
2823:R0803,
2824:R0804,
2825:R0670,
2844:R0671,
2846:R0672,
2847:R0673,
2858:R0674,
2861:R0675,
2862:R0676,
2868:R0677,
2870:R0678,
2871:R0679,
2872:R0680,
2873:R0681,
2874:R0682,
2877:R0683,
2878:R0684,
2886:R0685,
2887:R0687,
2888:R0686,
2889:R0688,
2892:R0689,
2893:R0690,
2895:R0691,
2903:R0692,
2904:R0694,
2905:R0695,
2906:R0696,
2907:R0697,
2909:R0698,
2912:R0699,
2913:R0700,
2915:R0701,
2916:R0702,
2919:R0703,
2920:R0704,
2922:R0705,
2923:R0706,
2924:R0707,
2925:R0708,
2926:R0709,
2935:R0710,
2936:R0711,
2937:R0712,
2938:R0713,
2939:R0714,
2945:R0715,
2949:R0716,
2952:R0717,
2956:R0718,
3006:R0719,
3014:R0720,
3015:R0721,
3016:R0722,
3017:R0723,
3019:R0724,
3022:R0725,
3026:R0726,
3029:R0727,
3030:R0728,
3033:R0729,
3037:R0730,
3039:R0731,
3046:R0733,
3047:R0734,
3055:R0735,
3056:R0736,
3058:R0737,
3059:R0805,
3061:R0738,
3062:R0739,
3065:R0740,
3072:R0741,
3073:R0742,
3074:R0743,
3075:R0744,
3078:R0745,
3080:R0746,
3082:R0747,
3097:R0748,
3099:R0749,
3106:R0750,
3109:R0751,
3111:R0752,
3113:R0753,
3114:R0754,
3115:R0755,
3116:R0756,
3123:R0757,
3126:R0758,
3127:R0759,
3128:R0760,
3129:R0761,
3130:R0762,
3131:R0763,
3132:R0764,
3137:R0765,
3140:R0766,
3150:R0767,
3156:R0768,
3168:R0769,
3169:R0770,
3170:R0771,
3171:R0772,
3187:R0773,
3191:R0774,
3194:R0775,
3200:R0776,
3207:R0777,
3218:R0778,
3229:R0779,
3234:R0780,
3238:R0781,
3241:R0782,
3246:R0783,
3248:R0784,
3249:R0785,
3250:R0786,
3251:R0787,
3254:R0788,
3257:R0789,
3771:R0106,
3772:R0168,
3773:R0219,
3774:R0257,
3775:R0262,
3776:R0347,
3777:R0410,
3778:R0426,
3779:R0460,
3780:R0465,
3781:R0576,
3782:R0602,
3783:R0630,
3784:R0693,
3785:R0732,
EOT;

  $map_string = variable_get('odug_r_numbers', $map_string);

  $rows = explode(',', $map_string);
  $map = array();

  foreach ($rows as $row) {
    $mapping = explode(':', $row);
    $map[(int) $mapping[0]] = $mapping[1];
  }

  foreach ($variables['themed_rows'] as &$row) {
    $nid = str_replace('"', '', $row['nid']);
    $row['counter'] = $map[$nid] ? '"' . $map[$nid] . '"' : '"N/A"';
  }

}

