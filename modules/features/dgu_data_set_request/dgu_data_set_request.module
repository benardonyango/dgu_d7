<?php
/**
 * @file
 * Code for the DGU Data set request feature.
 */


define('DATA_REQUEST_MODERATION_PERMISSION', 'edit any dataset_request content');
define('PUBLIC_DATA_REQUEST_GRANT', 2147483647);    // maximum possible value (avialable in Solr) to avoid conflict with $node->uid
define('DATA_REQUEST_MODERATOR_GRANT', 2147483646); // maximum possible value (avialable in Solr) -1 to avoid conflict with $node->uid

include_once 'dgu_data_set_request.features.inc';

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function dgu_data_set_request_menu_breadcrumb_alter(&$active_trail, $item) {
  switch ($item['path']) {
    case 'data-request':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('Latest data requests');
      break;
    case 'data-request/blogs':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('ODUG Blogs');
      break;
    case 'data-request/minutes':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('ODUG Minutes');
      break;
  }
  if (isset($item['map'][1]->type) && $item['map'][1]->type == 'dataset_request') {
    $active_trail[2] = $active_trail[1];
    $active_trail[1] = array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array());
  }
}

function dgu_data_set_request_dgu_moderation_moderator_permission(&$node) {
  global $user;
  if ($node->type == 'dataset_request') {
    if (user_access(DATA_REQUEST_MODERATION_PERMISSION) || is_or_was_assignee($node->nid)) {
      return TRUE;
    }
  }
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 *
 * Implements Hook hook_form_FORM_ID_alter which:
 * -  creates our own hidden input for review status and hides the select
 * box for any user who does not have the "Dataset Request: Edit any content" permission.
 * - adds a button to submit the data request for moderation.
 */
function dgu_data_set_request_form_dataset_request_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $node = $form['#node'];
  drupal_set_title('Create a dataset request');
  unset($form['actions']['preview']);
  $form['#attributes']['class'][] = "boxed";

  if (user_access(DATA_REQUEST_MODERATION_PERMISSION) || is_or_was_assignee($node->nid)) {
    $form['#after_build'][] = 'dgu_moderation_node_forms_after_build';
  }
  else {
    dgu_moderation_node_forms_alter($form);
  }

}

function dgu_data_set_request_node_access($node, $op, $account) {
  if ($op != 'create' && $node->type == 'dataset_request') {
    if(!($node->uid == $account->uid || user_access(DATA_REQUEST_MODERATION_PERMISSION))) {
      if(isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
        return NODE_ACCESS_DENY;
      }
    }
  }
}

function dgu_data_set_request_node_access_records($node) {
  if ($node->type == 'dataset_request') {

    $assignees = dgu_data_set_request_get_assignees($node->nid);

    $grants = array();
    if (isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
      // Private request
      $grants[] = array(
        'realm' => 'private_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      );
      if ($node->uid) {
        // Grant author permission only if author is not anonymous.
        $grants[] = array(
          'realm' => 'private_data_request',
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
        );
      }
      if (!empty($assignees)) {
        // Grant permission to all users which are or were assignees in this request.
        foreach($assignees as $assignee_uid) {
          $grants[] = array(
            'realm' => 'private_data_request',
            'gid' => $assignee_uid,
            'grant_view' => 1,
            'grant_update' => 1,
            'grant_delete' => 0,
          );
        }
      }
    }
    else {
      // Public request
      $grants[] = array(
        'realm' => 'public_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      );
      if ($node->uid) {
        // Grant author permission only if author is not anonymous.
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
        );
      }
      if (!empty($assignees)) {
        // Grant permission to all users which are or were assignees in this request.
        foreach($assignees as $assignee_uid) {
          $grants[] = array(
            'realm' => 'public_data_request',
            'gid' => $assignee_uid,
            'grant_view' => 1,
            'grant_update' => 1,
            'grant_delete' => 0,
          );
        }
      }
      if ($node->status == 1) {
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => PUBLIC_DATA_REQUEST_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
        );
      }
    }
    return $grants;
  }
}

function dgu_data_set_request_node_grants($account, $op) {
  $grants = array();
  $grants['private_data_request'] = array($account->uid);
  $grants['public_data_request'] = array($account->uid, PUBLIC_DATA_REQUEST_GRANT);
  if (user_access(DATA_REQUEST_MODERATION_PERMISSION, $account)) {
    $grants['private_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
    $grants['public_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
  }
  return $grants;
}


/**
 * Implements hook_assignee_get_users().
 */
function dgu_data_set_request_assignee_get_users($field, $instance, $entity_type, $entity) {

  $query = db_select('role', 'r');
  $query->join('users_roles', 'ur', 'r.rid = ur.rid');
  $query->join('users', 'u', 'u.uid = ur.uid');
  $query->fields('r', array('name'))
        ->fields('ur', array('uid'))
        ->fields('u', array('name'))
        ->condition('r.name', 'data request %', 'LIKE');
  $users = $query->execute()->fetchAll();

  $options = array();
  foreach ($users as $user) {
    $options[$user->name][$user->uid] = $user->u_name;
  }

  if (isset($entity->field_publisher_ref[LANGUAGE_NONE][0]['id'])) {
    $publisher = ckan_publisher_load($entity->field_publisher_ref[LANGUAGE_NONE][0]['id']);

    $query = db_select('users', 'u')
      ->fields('u', array('uid', 'name'));
    $query->join('field_data_field_publishers', 'fp','fp.entity_id = u.uid');
    $query->join('field_data_field_publisher_ref', 'dh', 'dh.field_publisher_ref_id = fp.field_publishers_target_id');
    $query->condition('fp.entity_type', 'user')
      ->condition('dh.entity_type', 'node')
      ->condition('dh.bundle', 'dataset_request')
      ->condition('dh.entity_id', $entity->nid);
    $publishing_users = $query->execute()->fetchAllKeyed();

    $options[$publisher->title] = $publishing_users;
  }

  return $options;
}

function dgu_data_set_request_get_assignees($nid) {
  // TODO add static cache
  $query = db_select('field_revision_field_assignee', 'fa')
    ->distinct()
    ->fields('fa', array('field_assignee_uid'))
    ->condition('entity_type', 'node')
    ->condition('entity_id', $nid);
  return $query->execute()->fetchCol();
}

function is_or_was_assignee($nid, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  $assignees = dgu_data_set_request_get_assignees($nid);
  return in_array($account->uid, $assignees);
}


/**
 * Implements hook_node_presave().
 */
function dgu_data_set_request_node_presave($node) {
  if ($node->type == 'dataset_request' && isset($node->field_assignee[LANGUAGE_NONE][0]['uid'])) {
    $previous_node_revision = node_load($node->nid);
    $previous_assignee = &drupal_static('previous_data_request_assignee');
    $previous_assignee = isset($previous_node_revision->field_assignee[LANGUAGE_NONE][0]['uid']) ? $previous_node_revision->field_assignee[LANGUAGE_NONE][0]['uid'] : NULL;
  }
}

/**
 * Implements hook_node_update().
 */
function dgu_data_set_request_node_update($node) {
  if ($node->type == 'dataset_request' && isset($node->field_assignee[LANGUAGE_NONE][0]['uid'])) {
    $previous_assignee = &drupal_static('previous_data_request_assignee');
    if ($previous_assignee != $node->field_assignee[LANGUAGE_NONE][0]['uid']) {


      global $user;
      $assignee = user_load($node->field_assignee[LANGUAGE_NONE][0]['uid']);

      flag('flag', 'subscribe_node', $node->nid, $assignee);

      $message = message_create('data_request_assignee');
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_data_request_reference->set($node);
      $wrapper->field_data_request_assignee->set($assignee);

      $options = array(
        'rendered fields' => array(
          'message_notify_email_subject' => 'field_message_rendered_subject',
          'message_notify_email_body' => 'field_message_rendered_body',
        ),
      );

      message_subscribe_send_message('node', $node, $message, array('email' => $options));
    }
  }
}
/**
 * Implements hook_preprocess_replies().
 */
function  dgu_data_set_request_preprocess_replies(&$variables) {
  if ($variables['bundle'] == 'review_comment' && $variables['entity_type'] == 'node' && !node_access('update', $variables['entity'])) {
    // Hide reply forms for users which haven't got access to edit entity.
    // We need to give them full access to create/update review_comment replies
    // but only on nodes they have permissions to edit, e.g data request assignee grant.
    unset($variables['replies']);
    unset($variables['reply_form']);
  }
}

function dgu_data_set_request_form_reply_add_form_alter(&$form, &$form_state, $form_id) {
  if($form['#bundle'] = 'review_comment') {
    $form['field_review_comment'][LANGUAGE_NONE][0]['#title'] = 'Add note';
    $form['submit']['#value'] = 'Submit note';
  }
}
