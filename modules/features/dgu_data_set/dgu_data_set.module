<?php
/**
 * @file
 * Code for the DGU Data set feature.
 */

include_once 'dgu_data_set.features.inc';

/**
 * Implements hook_entity_insert().
 */
function dgu_data_set_entity_insert($entity, $type) {
  if (module_exists('message_subscribe')) {

    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );

    // A new comment on a dataset.
    if($type == 'reply' && $entity->bundle == 'comment' && $entity->entity_type == 'ckan_dataset') {
      $message = message_create('dataset_comment_new');
      $wrapper = entity_metadata_wrapper('message', $message);
      $dataset = ckan_dataset_load($entity->entity_id);
      $wrapper->field_dataset_reference->set($dataset);
      $wrapper->field_reply_reference->set($entity);

      // First get publisher subscribers.
      $publisher_subscribers = _dgu_data_set_get_publisher_subscribers($dataset->publisher_id);
      // Then get all other subscribes subscribed via flag
      $subscribers = _dgu_data_set_get_subscribers($dataset->id, 'comment');
      // Users which subscribed via flag to the dataset but not to the publisher.
      $dataset_subscribers = array_diff_assoc($subscribers, $publisher_subscribers);

      message_subscribe_send_message('ckan_dataset', $dataset, $message, $options, array('uids' => $publisher_subscribers));
      message_subscribe_send_message('ckan_dataset', $dataset, $message, $options, array('uids' => $dataset_subscribers));
    }

    // A new dataset.
    if($type == 'ckan_dataset') {
      $publisher_subscribers = _dgu_data_set_get_publisher_subscribers($entity->publisher_id);
      $message_dataset_new = message_create('dataset_new');
      $wrapper = entity_metadata_wrapper('message', $message_dataset_new);
      $wrapper->field_dataset_reference->set($entity);
      message_subscribe_send_message('ckan_dataset', $entity, $message_dataset_new, $options, array('uids' => $publisher_subscribers));
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function dgu_data_set_entity_update($entity, $type) {
  if($type == 'ckan_dataset' && module_exists('message_subscribe')) {

    if ($entity->data['resources'] != $entity->original->data['resources']) {
      $options = array(
        'rendered fields' => array(
          'message_notify_email_subject' => 'field_message_rendered_subject',
          'message_notify_email_body' => 'field_message_rendered_body',
        ),
      );

      $message = message_create('dataset_update');
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_dataset_reference->set($entity);

      // First get publisher subscribers.
      $publisher_subscribers = _dgu_data_set_get_publisher_subscribers($entity->publisher_id);
      // Then get all other subscribes subscribed via flag
      $subscribers = _dgu_data_set_get_subscribers($entity->id, 'update');
      // Users which subscribed via flag to the dataset but not to the publisher.
      $dataset_subscribers = array_diff_assoc($subscribers, $publisher_subscribers);

      message_subscribe_send_message('ckan_dataset', $entity, $message, $options, array('uids' => $publisher_subscribers));
      message_subscribe_send_message('ckan_dataset', $entity, $message, $options, array('uids' => $dataset_subscribers));
    }
  }
}

/**
 * Implements hook_ckan_dataset_delete().
 */
function dgu_data_set_ckan_dataset_delete($ckan_dataset) {
  foreach (flag_get_flags('ckan_dataset') as $flag) {
    _flag_entity_delete('ckan_dataset', $ckan_dataset->id, $flag->fid);
  }
  // TODO - remove entries from field_data_field_publisher_subscribe
}

function _dgu_data_set_get_publisher_subscribers($publisher_id) {
  $uids = db_select('field_data_field_publisher_subscribe', 'ps')
    ->fields('ps', array('entity_id'))
    ->condition('ps.field_publisher_subscribe_id', $publisher_id)
    ->execute()
    ->fetchCol();

  $default_notifier = variable_get('message_subscribe_default_notifiers', array('email' => 'email'));

  $publisher_subscribers = array();
  foreach($uids as $uid) {
    $user = user_load($uid);
    $publisher_subscribers[$uid]['notifiers'] = isset($user->field_digest_notifier[LANGUAGE_NONE][0]['value']) ? array($user->field_digest_notifier[LANGUAGE_NONE][0]['value'] => $user->field_digest_notifier[LANGUAGE_NONE][0]['value']) : $default_notifier;
  }

  return $publisher_subscribers;
}

function _dgu_data_set_get_subscribers($dataset_id, $type) {
  // Get all flags on given entity type.
  // We can't use message_subscribe_flag_get_flags() here because it checks user permissions which are missing when drupal bootstrapped with drush
  $default_notifier = variable_get('message_subscribe_default_notifiers', array('email' => 'email'));

  $query = db_select('flagging', 'fl');
  $query->join('users', 'u', 'u.uid = fl.uid');
  $query->join('flag', 'fg', 'fl.fid = fg.fid');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('field_data_field_digest_notifier', 'fdn', 'fdn.entity_id = u.uid');
  $query->fields('fl', array('uid'));
  $query->fields('fg', array('name'));
  $query->fields('fdn', array('field_digest_notifier_value'))
    ->distinct()
    ->condition('fl.entity_type', 'ckan_dataset')
    ->condition('fl.entity_id', $dataset_id)
    ->condition('fg.name', 'subscribe_dataset_' . $type);

  $result = $query->execute()->fetchAll();
  $uids = array();
  foreach ($result as $row) {
    $uids[$row->uid]['notifiers'] = isset($row->field_digest_notifier_value) ? array($row->field_digest_notifier_value => $row->field_digest_notifier_value) : $default_notifier;
  }
  return $uids;
}

/**
 * Implements hook_url_outbound_alter().
 */
function dgu_data_set_url_outbound_alter(&$path, &$options, $original_path) {
  if(substr($path, 0, 12) == 'ckan_dataset') {
    $dataset = entity_load_single('ckan_dataset', substr($path, 13));
    $path = 'dataset/' . $dataset->name;
  }
}

/**
 * Implements hook_menu().
 */
function dgu_data_set_menu(){
  $items['comments/publisher/%'] = array(
    'title' => 'Dataset comments',
    'page callback' => 'dgu_data_set_comments',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function dgu_data_set_theme($existing, $type, $theme, $path) {
  return array(
    'dataset_comments_report' => array(
      'path' => drupal_get_path('module', 'dgu_data_set') . '/templates',
      'template' => 'dataset_comments_report',
      'variables' => array(
        'dataset_comments' => NULL,
      ),
    ),
  );
}

function dgu_data_set_comments($publisher_id){

  global $user;
  $account = user_load($user->uid);
  $publisher = ckan_publisher_load($publisher_id);

  $sql = "SELECT
  d.title,
  d.name,
  d.ckan_id,
  MAX(r.created) as reply_max_created
  FROM ckan_dataset d
  JOIN ckan_publisher p ON  p.id = d.publisher_id
  JOIN reply r ON (d.id = r.entity_id AND r.entity_type = 'ckan_dataset')
  WHERE p.id = :pid
  GROUP BY d.ckan_id
  ORDER BY reply_max_created DESC
  ";

  $result = db_query($sql, array(':pid' => $publisher->id));

  $datasets_comments = array();
  foreach  ($result as $row) {

    if ($dataset = dgu_services_get_dataset_from_ckan_id($row->ckan_id)) {

      $output = field_attach_view('ckan_dataset', $dataset, 'default');
      if (isset($output['field_comment'][0]['#markup'])) {
        // Fix flag on replies on ckan side so user is redirected back to a dataset vie page instead of drupal api endpoint
        $comments = preg_replace('/<div class="replies-links">.*<\/div>/i', '', $output['field_comment'][0]['#markup']);
        $comments = preg_replace('/<div class="reply-links.*<\/div>/i', '', $comments);
        $comments = preg_replace('/<a href="\/flag\/flag\/spam.*/im', '', $comments);

        $datasets_comments[$row->ckan_id] = array(
          'title' => $row->title,
          'name' => $row->name,
          'reply_max_created' => $row->reply_max_created,
          'comments' => $comments,
        );

      }
    }
  }

  $is_admin = dgu_user_is_ckan_admin($user);
  if ($is_admin) {
    $email_notifications = isset($account->data['dataset_comments']) && $account->data['dataset_comments'] ? 'enabled' : 'disabled';
  }

  return theme('dataset_comments_report',  array('datasets_comments' => $datasets_comments, 'publisher' => $publisher, 'is_admin' => $is_admin, 'email_notifications' => $email_notifications, 'uid' => $user->uid));
}
