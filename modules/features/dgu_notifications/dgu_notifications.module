<?php
/**
 * @file
 * Code for the DGU Notifications feature.
 */

include_once 'dgu_notifications.features.inc';

/**
 * Implements hook_theme_registry_alter().
 *
 * To allow the theme files for the message_digest to reside in
 * the templates directory of the module.
 */
function dgu_notifications_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'dgu_notifications');

  unset($theme_registry['message_digest']['function']);
  $theme_registry['message_digest']['template'] = 'message-digest';
  $theme_registry['message_digest']['path'] = $module_path . "/templates";

  unset($theme_registry['message_digest_row']['function']);
  $theme_registry['message_digest_row']['template'] = 'message-digest-row';
  $theme_registry['message_digest_row']['path'] = $module_path . "/templates";

}

/**
 * Implements hook_node_update().
 */
function dgu_notifications_node_update($node) {
  // Data request notification is specific and implemented in dgu_data_set_request.module
  if ($node->type != 'dataset_request' && module_exists('message_subscribe')) {

    // Ignore second node update in single request.
    // See dgu_data_set_request_node_presave();
    $updates_to_ignore = &drupal_static('node_updates_to_ignore');
    if (is_array($updates_to_ignore) && in_array($node->nid, $updates_to_ignore)) {
      return;
    }

    // Don't create a message about moderation here, there should be
    // an universal message about moderation state change for all content types.
    if (empty($node->workbench_moderation_state_current) && $node->workbench_moderation['current']->from_state == 'needs_review' && $node->workbench_moderation['current']->state == 'published'
      || $node->workbench_moderation['current']->from_state == 'needs_review' && $node->workbench_moderation['current']->state == 'draft') {
      return;
    }

    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );
      $message_update = message_create('dgu_notifications_node_update');
      $wrapper = entity_metadata_wrapper('message', $message_update);
      $wrapper->field_node_reference->set($node);
      message_subscribe_send_message('node', $node, $message_update, $options);
  }
}

/**
 * Implements hook_node_presave().
 */
function dgu_notifications_node_presave($node) {
  if ($node->type != 'dataset_request') {
    $previous_node_revision = &drupal_static('previous_node_revision');
    // Workbench moderation uses shutdown function to update the node for the second time in the same request.
    // To avoid messages being created twice we ignore second node update in single request.
    if (isset($previous_node_revision)) {
      $updates_to_ignore = &drupal_static('node_updates_to_ignore');
      $updates_to_ignore = isset($updates_to_ignore) ? $updates_to_ignore : array();
      $updates_to_ignore[] = $node->nid;
    }
    // Store previous revision of the node in static cache to be available for comparison in hook_node_update().
    $previous_node_revision = node_load($node->nid);
  }
}

/**
 * Implements hook_entity_insert().
 */
function dgu_notifications_entity_insert($entity, $type) {
  if($type == 'reply' && $entity->bundle == 'comment' && module_exists('message_subscribe')) {
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );
    $data_request_admin_roles = variable_get('dgu_data_set_request_data_request_admin_roles',array(3, 6, 10)); // 3 = administrator, 6 = data publisher, 10 = data request administrator

    // Get data_request_update message bundle and set required fields.
    $message = message_create('dgu_notifications_reply_new');
    $wrapper = entity_metadata_wrapper('message', $message);
    $node = new stdClass();
    $node->nid = $entity->entity_id;
    $wrapper->field_node_reference->set($node);
    $wrapper->field_reply_reference->set($entity);

    $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles, FALSE);
    message_subscribe_send_message('node', $node, $message, $options, array('uids' => $uids));

  }
}


/**
 * Implements hook_message_digest_view_mode_alter().
 *
 * This isn't intended to actually alter anything in the context but
 * to cache statically uid to be used in dgu_notifications_tokens().
 */
function dgu_notifications_message_digest_view_mode_alter($context) {
  $current_subscriber_uid = &drupal_static('current-subscriber-uid');
  $current_subscriber_uid = $context['uid'];
}

/**
 * Implements hook_token_info().
 */
function dgu_notifications_token_info() {
  $info['tokens']['message']['current-subscriber-uid'] = array(
    'name' => t('Current subscriber'),
    'description' => t('Returns current subscriber uid in message_digest'),
  );
  return $info;
}
/**
 * Implements hook_tokens().
 */
function dgu_notifications_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'message') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'current-subscriber-uid':
          $uid = drupal_static('current-subscriber-uid');
          $uid = $uid ? $uid : $data['message']->uid;
          $replacements[$original] = $uid;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implement hook_mail_alter().
 */
function dgu_notifications_mail_alter(&$message) {
  global $base_url;
  if ($message['module'] == 'message_digest' || $message['module'] == 'message_notify') {

    $uid = FALSE;
    if (isset($message['params']['message_entity']->uid)) {
      $uid = $message['params']['message_entity']->uid;
    }
    elseif (isset($message['params']['uid'])) {
      $uid = $message['params']['uid'];
    }

    if ($uid) {
      if($message['id'] == 'message_notify_dataset_comment_new') {
        $message['body'][] = "You can unsubscribe or choose how often you receive email notifications in your account settings:\n" . $base_url . '/user/' . $uid . '/edit';
      }
      else {
        $message['body'][] = "You can choose how often you receive email notifications in your account settings:\n" . $base_url . '/user/' . $uid . '/edit';
      }
    }

  }
}